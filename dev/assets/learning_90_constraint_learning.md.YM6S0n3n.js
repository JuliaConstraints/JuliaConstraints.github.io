import{_ as l,c as o,j as s,a as t,G as a,a5 as e,B as r,o as p}from"./chunks/framework.CJakPlgM.js";const P=JSON.parse('{"title":"ConstraintLearning.jl","description":"","frontmatter":{},"headers":[],"relativePath":"learning/90_constraint_learning.md","filePath":"learning/90_constraint_learning.md","lastUpdated":null}'),d={name:"learning/90_constraint_learning.md"},h={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""};function Q(G,i,U,S,q,V){const n=r("Badge");return p(),o("div",null,[i[84]||(i[84]=s("h1",{id:"constraintlearning-jl",tabindex:"-1"},[t("ConstraintLearning.jl "),s("a",{class:"header-anchor",href:"#constraintlearning-jl","aria-label":'Permalink to "ConstraintLearning.jl"'},"â€‹")],-1)),i[85]||(i[85]=s("p",null,[t("Documentation for "),s("code",null,"ConstraintLearning.jl"),t(".")],-1)),s("details",h,[s("summary",null,[i[0]||(i[0]=s("a",{id:"ConstraintLearning.ICNConfig",href:"#ConstraintLearning.ICNConfig"},[s("span",{class:"jlbinding"},"ConstraintLearning.ICNConfig")],-1)),i[1]||(i[1]=t()),a(n,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[2]||(i[2]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ICNConfig{O </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ICNOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A structure to hold the metric and optimizer configurations used in learning the weights of an ICN.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/base.jl#L8-L12" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",g,[s("summary",null,[i[3]||(i[3]=s("a",{id:"ConstraintLearning.ICNConfig-Tuple{}",href:"#ConstraintLearning.ICNConfig-Tuple{}"},[s("span",{class:"jlbinding"},"ConstraintLearning.ICNConfig")],-1)),i[4]||(i[4]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[5]||(i[5]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ICNConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; metric </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :hamming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, optimizer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ICNGeneticOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Constructor for <code>ICNConfig</code>. Defaults to hamming metric using a genetic algorithm.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/genetic.jl#L150-L154" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",k,[s("summary",null,[i[6]||(i[6]=s("a",{id:"ConstraintLearning.ICNGeneticOptimizer-Tuple{}",href:"#ConstraintLearning.ICNGeneticOptimizer-Tuple{}"},[s("span",{class:"jlbinding"},"ConstraintLearning.ICNGeneticOptimizer")],-1)),i[7]||(i[7]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[8]||(i[8]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ICNGeneticOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; kargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Default constructor to learn an ICN through a Genetic Algorithm. Default <code>kargs</code> TBW.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/genetic.jl#L111-L115" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",u,[s("summary",null,[i[9]||(i[9]=s("a",{id:"ConstraintLearning.ICNLocalSearchOptimizer",href:"#ConstraintLearning.ICNLocalSearchOptimizer"},[s("span",{class:"jlbinding"},"ConstraintLearning.ICNLocalSearchOptimizer")],-1)),i[10]||(i[10]=t()),a(n,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ICNLocalSearchOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalSearchSolvers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Default constructor to learn an ICN through a CBLS solver.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/cbls.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",c,[s("summary",null,[i[12]||(i[12]=s("a",{id:"ConstraintLearning.ICNOptimizer",href:"#ConstraintLearning.ICNOptimizer"},[s("span",{class:"jlbinding"},"ConstraintLearning.ICNOptimizer")],-1)),i[13]||(i[13]=t()),a(n,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[14]||(i[14]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ICNOptimizer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CompositionalNetworks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractOptimizer</span></span></code></pre></div><p>An abstract type for optmizers defined to learn ICNs.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/base.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",y,[s("summary",null,[i[15]||(i[15]=s("a",{id:"ConstraintLearning.QUBOGradientOptimizer-Tuple{}",href:"#ConstraintLearning.QUBOGradientOptimizer-Tuple{}"},[s("span",{class:"jlbinding"},"ConstraintLearning.QUBOGradientOptimizer")],-1)),i[16]||(i[16]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[17]||(i[17]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QUBOGradientOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; kargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A QUBO optimizer based on gradient descent. Defaults TBW</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/qubo/gradient.jl#L8-L12" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",b,[s("summary",null,[i[18]||(i[18]=s("a",{id:"ConstraintLearning.QUBOOptimizer",href:"#ConstraintLearning.QUBOOptimizer"},[s("span",{class:"jlbinding"},"ConstraintLearning.QUBOOptimizer")],-1)),i[19]||(i[19]=t()),a(n,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[20]||(i[20]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QUBOOptimizer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QUBOConstraints</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractOptimizer</span></span></code></pre></div><p>An abstract type for optimizers used to learn QUBO matrices from constraints.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/qubo/base.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",m,[s("summary",null,[i[21]||(i[21]=s("a",{id:"CompositionalNetworks.optimize!-Tuple{Any, Any, Any, Any, Any, ICNGeneticOptimizer}",href:"#CompositionalNetworks.optimize!-Tuple{Any, Any, Any, Any, Any, ICNGeneticOptimizer}"},[s("span",{class:"jlbinding"},"CompositionalNetworks.optimize!")],-1)),i[22]||(i[22]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[23]||(i[23]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompositionalNetworks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optimize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(icn, solutions, non_sltns, dom_size, metric, optimizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ICNGeneticOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extends the <code>optimize!</code> method to <code>ICNGeneticOptimizer</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/genetic.jl#L126-L130" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",C,[s("summary",null,[i[24]||(i[24]=s("a",{id:"CompositionalNetworks.optimize!-Tuple{Any, Any, Any, Any, Any, ICNLocalSearchOptimizer}",href:"#CompositionalNetworks.optimize!-Tuple{Any, Any, Any, Any, Any, ICNLocalSearchOptimizer}"},[s("span",{class:"jlbinding"},"CompositionalNetworks.optimize!")],-1)),i[25]||(i[25]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[26]||(i[26]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompositionalNetworks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optimize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(icn, solutions, non_sltns, dom_size, metric, optimizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ICNLocalSearchOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extends the <code>optimize!</code> method to <code>ICNLocalSearchOptimizer</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/cbls.jl#L37-L41" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",j,[s("summary",null,[i[27]||(i[27]=s("a",{id:"ConstraintLearning._optimize!-NTuple{7, Any}",href:"#ConstraintLearning._optimize!-NTuple{7, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning._optimize!")],-1)),i[28]||(i[28]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[29]||(i[29]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_optimize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(icn, X, X_sols; metric </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hamming, pop_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Optimize and set the weights of an ICN with a given set of configuration <code>X</code> and solutions <code>X_sols</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/genetic.jl#L11-L14" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",E,[s("summary",null,[i[30]||(i[30]=s("a",{id:"ConstraintLearning.domain_size-Tuple{Number}",href:"#ConstraintLearning.domain_size-Tuple{Number}"},[s("span",{class:"jlbinding"},"ConstraintLearning.domain_size")],-1)),i[31]||(i[31]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[32]||(i[32]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">domain_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extends the domain_size function when <code>ds</code> is number (for dispatch purposes).</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/common.jl#L24-L28" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",v,[s("summary",null,[i[33]||(i[33]=s("a",{id:"ConstraintLearning.generate_population-Tuple{Any, Any}",href:"#ConstraintLearning.generate_population-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.generate_population")],-1)),i[34]||(i[34]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[35]||(i[35]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generate_population</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(icn, pop_size</span></span></code></pre></div><p>Generate a pÃ´pulation of weights (individuals) for the genetic algorithm weighting <code>icn</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/genetic.jl#L1-L4" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",f,[s("summary",null,[i[36]||(i[36]=s("a",{id:"ConstraintLearning.icn-Tuple{Any, Any}",href:"#ConstraintLearning.icn-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.icn")],-1)),i[37]||(i[37]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[38]||(i[38]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">icn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X,XÌ…; kargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>TBW</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",L,[s("summary",null,[i[39]||(i[39]=s("a",{id:"ConstraintLearning.loss-Tuple{Any, Any, Any}",href:"#ConstraintLearning.loss-Tuple{Any, Any, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.loss")],-1)),i[40]||(i[40]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[41]||(i[41]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, Q)</span></span></code></pre></div><p>Loss of the prediction given by <code>Q</code>, a training set <code>y</code>, and a given configuration <code>x</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/qubo/gradient.jl#L29-L33" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",A,[s("summary",null,[i[42]||(i[42]=s("a",{id:"ConstraintLearning.make_df-NTuple{5, Any}",href:"#ConstraintLearning.make_df-NTuple{5, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.make_df")],-1)),i[43]||(i[43]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[44]||(i[44]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_df</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, Q, penalty, binarization, domains)</span></span></code></pre></div><p>DataFrame arrangement to output some basic evaluation of a matrix <code>Q</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/qubo/gradient.jl#L36-L40" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",F,[s("summary",null,[i[45]||(i[45]=s("a",{id:"ConstraintLearning.make_set_penalty-Tuple{Any, Any}",href:"#ConstraintLearning.make_set_penalty-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.make_set_penalty")],-1)),i[46]||(i[46]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[47]||(i[47]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_set_penalty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, XÌ…, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kargs)</span></span></code></pre></div><p>Return a penalty function when the training set is already split into a pair of solutions <code>X</code> and non solutions <code>XÌ…</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/common.jl#L63-L67" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",T,[s("summary",null,[i[48]||(i[48]=s("a",{id:"ConstraintLearning.make_training_sets-NTuple{4, Any}",href:"#ConstraintLearning.make_training_sets-NTuple{4, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.make_training_sets")],-1)),i[49]||(i[49]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[50]||(i[50]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_training_sets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, penalty, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a pair of solutions and non solutions sets based on <code>X</code> and <code>penalty</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/common.jl#L31-L35" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",O,[s("summary",null,[i[51]||(i[51]=s("a",{id:"ConstraintLearning.mutually_exclusive-Tuple{Any, Any}",href:"#ConstraintLearning.mutually_exclusive-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.mutually_exclusive")],-1)),i[52]||(i[52]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[53]||(i[53]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mutually_exclusive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layer, w)</span></span></code></pre></div><p>Constraint ensuring that <code>w</code> encode exclusive operations in <code>layer</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/cbls.jl#L12-L16" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",x,[s("summary",null,[i[54]||(i[54]=s("a",{id:"ConstraintLearning.no_empty_layer-Tuple{Any}",href:"#ConstraintLearning.no_empty_layer-Tuple{Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.no_empty_layer")],-1)),i[55]||(i[55]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[56]||(i[56]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">no_empty_layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Constraint ensuring that at least one operation is selected.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/cbls.jl#L23-L27" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",z,[s("summary",null,[i[57]||(i[57]=s("a",{id:"ConstraintLearning.optimize!-NTuple{8, Any}",href:"#ConstraintLearning.optimize!-NTuple{8, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.optimize!")],-1)),i[58]||(i[58]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[59]||(i[59]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optimize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(icn, X, X_sols, global_iter, local_iter; metric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hamming, popSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Optimize and set the weights of an ICN with a given set of configuration <code>X</code> and solutions <code>X_sols</code>. The best weights among <code>global_iter</code> will be set.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/genetic.jl#L57-L60" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",B,[s("summary",null,[i[60]||(i[60]=s("a",{id:"ConstraintLearning.parameter_specific_operations-Tuple{Any}",href:"#ConstraintLearning.parameter_specific_operations-Tuple{Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.parameter_specific_operations")],-1)),i[61]||(i[61]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[62]||(i[62]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parameter_specific_operations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Constraint ensuring that at least one operation related to parameters is selected if the error function to be learned is parametric.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/icn/cbls.jl#L30-L34" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",N,[s("summary",null,[i[63]||(i[63]=s("a",{id:"ConstraintLearning.predict-Tuple{Any, Any}",href:"#ConstraintLearning.predict-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.predict")],-1)),i[64]||(i[64]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[65]||(i[65]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">predict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, Q)</span></span></code></pre></div><p>Return the predictions given by <code>Q</code> for a given configuration <code>x</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/qubo/gradient.jl#L22-L26" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",D,[s("summary",null,[i[66]||(i[66]=s("a",{id:"ConstraintLearning.preliminaries-Tuple{Any, Any, Any}",href:"#ConstraintLearning.preliminaries-Tuple{Any, Any, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.preliminaries")],-1)),i[67]||(i[67]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[68]||(i[68]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">preliminaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args)</span></span></code></pre></div><p>Preliminaries to the training process in a <code>QUBOGradientOptimizer</code> run.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/qubo/gradient.jl#L77-L81" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",M,[s("summary",null,[i[69]||(i[69]=s("a",{id:"ConstraintLearning.qubo",href:"#ConstraintLearning.qubo"},[s("span",{class:"jlbinding"},"ConstraintLearning.qubo")],-1)),i[70]||(i[70]=t()),a(n,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[71]||(i[71]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">qubo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X,XÌ…; kargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>TBW</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/qubo.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",I,[s("summary",null,[i[72]||(i[72]=s("a",{id:"ConstraintLearning.sub_eltype-Tuple{Any}",href:"#ConstraintLearning.sub_eltype-Tuple{Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.sub_eltype")],-1)),i[73]||(i[73]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[74]||(i[74]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sub_eltype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X)</span></span></code></pre></div><p>Return the element type of of the first element of a collection.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/common.jl#L17-L21" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",X,[s("summary",null,[i[75]||(i[75]=s("a",{id:"ConstraintLearning.train!-NTuple{9, Any}",href:"#ConstraintLearning.train!-NTuple{9, Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.train!")],-1)),i[76]||(i[76]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[77]||(i[77]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">train!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Q, X, penalty, Î·, precision, X_test, oversampling, binarization, domains)</span></span></code></pre></div><p>Training inner method.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/qubo/gradient.jl#L98-L102" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",J,[s("summary",null,[i[78]||(i[78]=s("a",{id:"ConstraintLearning.train-Union{Tuple{D}, Tuple{Any, Any, Vector{D}}} where D<:DiscreteDomain",href:"#ConstraintLearning.train-Union{Tuple{D}, Tuple{Any, Any, Vector{D}}} where D<:DiscreteDomain"},[s("span",{class:"jlbinding"},"ConstraintLearning.train")],-1)),i[79]||(i[79]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[80]||(i[80]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">train</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, penalty[, d]; optimizer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> QUBOGradientOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), X_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X)</span></span></code></pre></div><p>Learn a QUBO matrix on training set <code>X</code> for a constraint defined by <code>penalty</code> with optional domain information <code>d</code>. By default, it uses a <code>QUBOGradientOptimizer</code> and <code>X</code> as a testing set.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/qubo/gradient.jl#L127-L131" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",w,[s("summary",null,[i[81]||(i[81]=s("a",{id:"ConstraintLearning.Î´-Tuple{Any}",href:"#ConstraintLearning.Î´-Tuple{Any}"},[s("span",{class:"jlbinding"},"ConstraintLearning.Î´")],-1)),i[82]||(i[82]=t()),a(n,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[83]||(i[83]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Î´</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X[, Y]; discrete </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the extrema over a collection <code>X``or a pair of collection</code>(X, Y)`.</p><p><a href="https://github.com/JuliaConstraints/ConstraintLearning.jl/blob/v0.1.9/src/common.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))])])}const R=l(d,[["render",Q]]);export{P as __pageData,R as default};
