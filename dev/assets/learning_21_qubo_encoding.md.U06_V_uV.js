import{_ as t,c as r,j as n,a as s,G as e,a5 as o,B as l,o as d}from"./chunks/framework.CJakPlgM.js";const v=JSON.parse('{"title":"Encoding for QUBO programs","description":"","frontmatter":{},"headers":[],"relativePath":"learning/21_qubo_encoding.md","filePath":"learning/21_qubo_encoding.md","lastUpdated":null}'),p={name:"learning/21_qubo_encoding.md"},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""};function k(b,i,u,m,f,C){const a=l("Badge");return d(),r("div",null,[i[9]||(i[9]=n("h1",{id:"Encoding-for-QUBO-programs",tabindex:"-1"},[s("Encoding for QUBO programs "),n("a",{class:"header-anchor",href:"#Encoding-for-QUBO-programs","aria-label":'Permalink to "Encoding for QUBO programs {#Encoding-for-QUBO-programs}"'},"â€‹")],-1)),n("details",c,[n("summary",null,[i[0]||(i[0]=n("a",{id:"QUBOConstraints.is_valid-learning-21_qubo_encoding",href:"#QUBOConstraints.is_valid-learning-21_qubo_encoding"},[n("span",{class:"jlbinding"},"QUBOConstraints.is_valid")],-1)),i[1]||(i[1]=s()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[2]||(i[2]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_valid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check if <code>x</code> has a valid format for <code>encoding</code>.</p><p>For instance, if <code>encoding == :one_hot</code>, at most one bit of <code>x</code> can be set to 1.</p><p><a href="https://github.com/JuliaConstraints/QUBOConstraints.jl/blob/v0.2.2/src/encoding/conversion.jl#L1-L7" target="_blank" rel="noreferrer">source</a></p>',4))]),n("details",g,[n("summary",null,[i[3]||(i[3]=n("a",{id:"QUBOConstraints.binarize-learning-21_qubo_encoding",href:"#QUBOConstraints.binarize-learning-21_qubo_encoding"},[n("span",{class:"jlbinding"},"QUBOConstraints.binarize")],-1)),i[4]||(i[4]=s()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[5]||(i[5]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">binarize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x[, domain]; binarization </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :one_hot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Binarize <code>x</code> following the <code>binarization</code> encoding. If <code>x</code> is a vector (instead of a number per say), <code>domain</code> is optional.</p><p><a href="https://github.com/JuliaConstraints/QUBOConstraints.jl/blob/v0.2.2/src/encoding/conversion.jl#L12-L16" target="_blank" rel="noreferrer">source</a></p>',3))]),n("details",h,[n("summary",null,[i[6]||(i[6]=n("a",{id:"QUBOConstraints.debinarize-learning-21_qubo_encoding",href:"#QUBOConstraints.debinarize-learning-21_qubo_encoding"},[n("span",{class:"jlbinding"},"QUBOConstraints.debinarize")],-1)),i[7]||(i[7]=s()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[8]||(i[8]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">debinarize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x[, domain]; binarization </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :one_hot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Transform a binary vector into a number or a set of number. If <code>domain</code> is not given, it will compute a default value based on <code>binarization</code> and <code>x</code>.</p><p><a href="https://github.com/JuliaConstraints/QUBOConstraints.jl/blob/v0.2.2/src/encoding/conversion.jl#L37-L41" target="_blank" rel="noreferrer">source</a></p>',3))])])}const B=t(p,[["render",k]]);export{v as __pageData,B as default};
