import{_ as o,c as l,a5 as i,j as t,a as n,G as e,B as r,o as p}from"./chunks/framework.CJakPlgM.js";const T=JSON.parse('{"title":"ConstraintCommons.jl","description":"","frontmatter":{},"headers":[],"relativePath":"constraints/60_constraint_commons.md","filePath":"constraints/60_constraint_commons.md","lastUpdated":null}'),h={name:"constraints/60_constraint_commons.md"},c={class:"jldocstring custom-block",open:""},d={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""};function A(x,s,_,D,B,w){const a=r("Badge");return p(),l("div",null,[s[42]||(s[42]=i('<h1 id="constraintcommons-jl" tabindex="-1">ConstraintCommons.jl <a class="header-anchor" href="#constraintcommons-jl" aria-label="Permalink to &quot;ConstraintCommons.jl&quot;">​</a></h1><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl" target="_blank" rel="noreferrer">ConstraintCommons.jl</a> is an essential package within the <em>Julia Constraints</em> ecosystem designed to facilitate the development and interoperability of constraint programming solutions in Julia. It serves as a foundational layer that provides shared structures, abstract types, functions, and generic methods utilized by both basic feature packages and learning-oriented packages.</p><p>Only advanced users or package developers are likely to use it. The package covers <em>parameters</em>, (regular) <em>languages</em>, <code>Core</code> or <code>Base</code> methods <em>extensions</em>, <em>sampling</em>, <em>extrema</em>, and <em>dictionaries</em>.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>This section of the package list or extract parameters based on the <em>XCSP3-core</em> specifications. Note that, for the foreseeable future, the default constraints specification will follow these specifications.</p>',5)),t("details",c,[t("summary",null,[s[0]||(s[0]=t("a",{id:"ConstraintCommons.USUAL_CONSTRAINT_PARAMETERS-constraints-60_constraint_commons",href:"#ConstraintCommons.USUAL_CONSTRAINT_PARAMETERS-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.USUAL_CONSTRAINT_PARAMETERS")],-1)),s[1]||(s[1]=n()),e(a,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),s[2]||(s[2]=i(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USUAL_CONSTRAINT_PARAMETERS</span></span></code></pre></div><p>List of usual constraints parameters (based on <code>XCSP3-core</code> constraints). The list is based on the nature of each kind of parameter instead of the keywords used in the <code>XCSP3-core</code> format.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USUAL_CONSTRAINT_PARAMETERS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># boolean parameter</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :dim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dimension, an integer parameter used along the pair_vars or vals parameters</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># index to target one variable in the input vector</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :language</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># describe a regular language such as an automaton or a MDD</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :op</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># an operator such as comparison or arithmetic operator</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :pair_vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># a list of parameters that are paired with each variable in the input vector</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># one scalar value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :vals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># a list of scalar values (independent of the input vector size)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/parameters.jl#L1-L18" target="_blank" rel="noreferrer">source</a></p>`,4))]),t("details",d,[t("summary",null,[s[3]||(s[3]=t("a",{id:"ConstraintCommons.extract_parameters-constraints-60_constraint_commons",href:"#ConstraintCommons.extract_parameters-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.extract_parameters")],-1)),s[4]||(s[4]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[5]||(s[5]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">extract_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Method, Function}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; parameters)</span></span></code></pre></div><p>Extracts the intersection between the <code>kargs</code> of <code>m</code> and <code>parameters</code> (defaults to <code>USUAL_CONSTRAINT_PARAMETERS</code>).</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/parameters.jl#L22-L26" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">extract_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, constraints_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">USUAL_CONSTRAINTS; parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConstraintCommons</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">USUAL_CONSTRAINT_PARAMETERS)</span></span></code></pre></div><p>Return the parameters of the constraint <code>s</code> in <code>constraints_dict</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>s::Symbol</code>: the constraint name.</p></li><li><p><code>constraints_dict::Dict{Symbol,Constraint}</code>: dictionary of constraints. Default is <code>USUAL_CONSTRAINTS</code>.</p></li><li><p><code>parameters::Vector{Symbol}</code>: vector of parameters. Default is <code>ConstraintCommons.USUAL_CONSTRAINT_PARAMETERS</code>.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">extract_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:all_different</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/Constraints.jl/blob/v0.5.8/src/usual_constraints.jl#L46-L60" target="_blank" rel="noreferrer">source</a></p>',10))]),s[43]||(s[43]=i('<h3 id="performances" tabindex="-1">Performances <a class="header-anchor" href="#performances" aria-label="Permalink to &quot;Performances&quot;">​</a></h3><div style="display:flex;justify-content:space-between;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/bench_evolution_parameters.png?raw=true" alt="Bench Evolution Parameters" style="width:48%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/chair_evolution_parameters.png?raw=true" alt="Chair Evolution Parameters" style="width:48%;"></div><h2 id="languages" tabindex="-1">Languages <a class="header-anchor" href="#languages" aria-label="Permalink to &quot;Languages&quot;">​</a></h2><p><em>XCSP3</em> considers two kinds of structure to recognize languages as core constraints: Automata, Multivalued Decision Diagrams (MMDs).</p>',4)),t("details",m,[t("summary",null,[s[6]||(s[6]=t("a",{id:"ConstraintCommons.AbstractMultivaluedDecisionDiagram-constraints-60_constraint_commons",href:"#ConstraintCommons.AbstractMultivaluedDecisionDiagram-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.AbstractMultivaluedDecisionDiagram")],-1)),s[7]||(s[7]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[8]||(s[8]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractMultivaluedDecisionDiagram</span></span></code></pre></div><p>An abstract interface for Multivalued Decision Diagrams (MDD) used in Julia Constraints packages. Requirements:</p><ul><li><code>accept(a&lt;:AbstractMultivaluedDecisionDiagram, word)</code>: return <code>true</code> if <code>a</code> accepts <code>word</code>.</li></ul><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/diagrams.jl#L1-L6" target="_blank" rel="noreferrer">source</a></p>',4))]),t("details",u,[t("summary",null,[s[9]||(s[9]=t("a",{id:"ConstraintCommons.MDD-constraints-60_constraint_commons",href:"#ConstraintCommons.MDD-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.MDD")],-1)),s[10]||(s[10]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MDD{S,T} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractMultivaluedDecisionDiagram</span></span></code></pre></div><p>A minimal implementation of a multivalued decision diagram structure.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/diagrams.jl#L9-L13" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",k,[t("summary",null,[s[12]||(s[12]=t("a",{id:"ConstraintCommons.AbstractAutomaton-constraints-60_constraint_commons",href:"#ConstraintCommons.AbstractAutomaton-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.AbstractAutomaton")],-1)),s[13]||(s[13]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[14]||(s[14]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractAutomaton</span></span></code></pre></div><p>An abstract interface for automata used in Julia Constraints packages. Requirements:</p><ul><li><code>accept(a&lt;:AbstractAutomaton, word)</code>: return <code>true</code> if <code>a</code> accepts <code>word</code>.</li></ul><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/automata.jl#L1-L6" target="_blank" rel="noreferrer">source</a></p>',4))]),t("details",g,[t("summary",null,[s[15]||(s[15]=t("a",{id:"ConstraintCommons.Automaton-constraints-60_constraint_commons",href:"#ConstraintCommons.Automaton-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.Automaton")],-1)),s[16]||(s[16]=n()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[17]||(s[17]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Automaton{S, T, F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union{S, Vector{S}, Set{S}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractAutomaton</span></span></code></pre></div><p>A minimal implementation of a deterministic automaton structure.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/automata.jl#L9-L13" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",b,[t("summary",null,[s[18]||(s[18]=t("a",{id:"ConstraintCommons.accept-constraints-60_constraint_commons",href:"#ConstraintCommons.accept-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.accept")],-1)),s[19]||(s[19]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[20]||(s[20]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Automaton, MDD}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, w)</span></span></code></pre></div><p>Return <code>true</code> if <code>a</code> accepts the word <code>w</code> and <code>false</code> otherwise.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/automata.jl#L29-L33" target="_blank" rel="noreferrer">source</a></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ConstraintCommons</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FakeAutomaton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, word)</span></span></code></pre></div><p>Implement the <code>accept</code> methods for <code>FakeAutomaton</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintDomains.jl/blob/v0.3.14/src/parameters.jl#L41-L45" target="_blank" rel="noreferrer">source</a></p>',6))]),t("details",C,[t("summary",null,[s[21]||(s[21]=t("a",{id:"ConstraintCommons.at_end-constraints-60_constraint_commons",href:"#ConstraintCommons.at_end-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.at_end")],-1)),s[22]||(s[22]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[23]||(s[23]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">at_end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Automaton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s)</span></span></code></pre></div><p>Internal method used by <code>accept</code> with <code>Automaton</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/automata.jl#L20-L24" target="_blank" rel="noreferrer">source</a></p>',3))]),s[44]||(s[44]=i('<h3 id="Performances-2" tabindex="-1">Performances <a class="header-anchor" href="#Performances-2" aria-label="Permalink to &quot;Performances {#Performances-2}&quot;">​</a></h3><div style="display:flex;flex-wrap:wrap;justify-content:space-between;"><div style="flex:1 1 48%;margin:1%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/bench_evolution_automata.png?raw=true" alt="Bench Evolution Automata" style="width:100%;"></div><div style="flex:1 1 48%;margin:1%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/chair_evolution_automata.png?raw=true" alt="Chair Evolution Automata" style="width:100%;"></div><div style="flex:1 1 48%;margin:1%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/bench_evolution_diagrams.png?raw=true" alt="Bench Evolution Diagrams" style="width:100%;"></div><div style="flex:1 1 48%;margin:1%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/chair_evolution_diagrams.png?raw=true" alt="Chair Evolution Diagrams" style="width:100%;"></div></div><h2 id="extensions" tabindex="-1">Extensions <a class="header-anchor" href="#extensions" aria-label="Permalink to &quot;Extensions&quot;">​</a></h2><p>We extend some operations for <code>Nothing</code> and <code>Symbol</code>.</p>',4)),t("details",y,[t("summary",null,[s[24]||(s[24]=t("a",{id:"ConstraintCommons.symcon-constraints-60_constraint_commons",href:"#ConstraintCommons.symcon-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.symcon")],-1)),s[25]||(s[25]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[26]||(s[26]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">symcon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, connector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extends <code>*</code> to <code>Symbol</code>s multiplication by connecting the symbols by an <code>_</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/symbols.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",E,[t("summary",null,[s[27]||(s[27]=t("a",{id:"ConstraintCommons.consin-constraints-60_constraint_commons",href:"#ConstraintCommons.consin-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.consin")],-1)),s[28]||(s[28]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[29]||(s[29]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">consin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extends <code>Base.in</code> (or <code>∈</code>) when the set is <code>nothing</code>. Returns <code>false</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/nothing.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",v,[t("summary",null,[s[30]||(s[30]=t("a",{id:"ConstraintCommons.consisempty-constraints-60_constraint_commons",href:"#ConstraintCommons.consisempty-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.consisempty")],-1)),s[31]||(s[31]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[32]||(s[32]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">consisempty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extends <code>Base.isempty</code> when the set is <code>nothing</code>. Returns <code>true</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/nothing.jl#L9-L13" target="_blank" rel="noreferrer">source</a></p>',3))]),s[45]||(s[45]=i('<h3 id="Performances-3" tabindex="-1">Performances <a class="header-anchor" href="#Performances-3" aria-label="Permalink to &quot;Performances {#Performances-3}&quot;">​</a></h3><div style="display:flex;flex-wrap:wrap;justify-content:space-between;"><div style="flex:1 1 48%;margin:1%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/bench_evolution_nothing.png?raw=true" alt="Bench Evolution Nothing" style="width:100%;"></div><div style="flex:1 1 48%;margin:1%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/chair_evolution_nothing.png?raw=true" alt="Chair Evolution Nothing" style="width:100%;"></div><div style="flex:1 1 48%;margin:1%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/bench_evolution_symbols.png?raw=true" alt="Bench Evolution Symbols" style="width:100%;"></div><div style="flex:1 1 48%;margin:1%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/chair_evolution_symbols.png?raw=true" alt="Chair Evolution Symbols" style="width:100%;"></div></div><h2 id="sampling" tabindex="-1">Sampling <a class="header-anchor" href="#sampling" aria-label="Permalink to &quot;Sampling&quot;">​</a></h2><p>During our constraint learning processes, we use sampling to efficiently make partial exploration of search spaces. The following are some examples of sampling utilities.</p>',4)),t("details",f,[t("summary",null,[s[33]||(s[33]=t("a",{id:"ConstraintCommons.oversample-constraints-60_constraint_commons",href:"#ConstraintCommons.oversample-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.oversample")],-1)),s[34]||(s[34]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[35]||(s[35]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">oversample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, f)</span></span></code></pre></div><p>Oversample elements of <code>X</code> until the boolean function <code>f</code> has as many <code>true</code> and <code>false</code> configurations.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/sampling.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),s[46]||(s[46]=i('<h3 id="Performances-4" tabindex="-1">Performances <a class="header-anchor" href="#Performances-4" aria-label="Permalink to &quot;Performances {#Performances-4}&quot;">​</a></h3><div style="display:flex;justify-content:space-between;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/bench_evolution_samplings.png?raw=true" alt="Bench Evolution" style="width:48%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/chair_evolution_samplings.png?raw=true" alt="Chair Evolution" style="width:48%;"></div><h2 id="extrema" tabindex="-1">Extrema <a class="header-anchor" href="#extrema" aria-label="Permalink to &quot;Extrema&quot;">​</a></h2><p>We need to compute the difference between extrema of various kind of collections in several situations.</p>',4)),t("details",j,[t("summary",null,[s[36]||(s[36]=t("a",{id:"ConstraintCommons.δ_extrema-constraints-60_constraint_commons",href:"#ConstraintCommons.δ_extrema-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.δ_extrema")],-1)),s[37]||(s[37]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[38]||(s[38]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">δ_extrema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute both the difference between the maximum and the minimum of over all the collections of <code>X</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/extrema.jl#L1-L4" target="_blank" rel="noreferrer">source</a></p>',3))]),s[47]||(s[47]=i('<h3 id="Performances-5" tabindex="-1">Performances <a class="header-anchor" href="#Performances-5" aria-label="Permalink to &quot;Performances {#Performances-5}&quot;">​</a></h3><div style="display:flex;justify-content:space-between;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/bench_evolution_extrema.png?raw=true" alt="Bench Evolution" style="width:48%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/chair_evolution_extrema.png?raw=true" alt="Chair Evolution" style="width:48%;"></div><h2 id="dictionaries" tabindex="-1">Dictionaries <a class="header-anchor" href="#dictionaries" aria-label="Permalink to &quot;Dictionaries&quot;">​</a></h2><p>We provide the ever-useful <code>incsert!</code> function for dictionaries.</p>',4)),t("details",F,[t("summary",null,[s[39]||(s[39]=t("a",{id:"ConstraintCommons.incsert!-constraints-60_constraint_commons",href:"#ConstraintCommons.incsert!-constraints-60_constraint_commons"},[t("span",{class:"jlbinding"},"ConstraintCommons.incsert!")],-1)),s[40]||(s[40]=n()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[41]||(s[41]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">incsert!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{AbstractDict, AbstractDictionary}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ind, val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Increase or insert a counter in a dictionary-based collection. The counter insertion defaults to <code>val = 1</code>.</p><p><a href="https://github.com/JuliaConstraints/ConstraintCommons.jl/blob/v0.2.3/src/dictionaries.jl#L2-L6" target="_blank" rel="noreferrer">source</a></p>',3))]),s[48]||(s[48]=i('<h3 id="Performances-6" tabindex="-1">Performances <a class="header-anchor" href="#Performances-6" aria-label="Permalink to &quot;Performances {#Performances-6}&quot;">​</a></h3><div style="display:flex;justify-content:space-between;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/bench_evolution_dictionaries.png?raw=true" alt="Bench Evolution" style="width:48%;"><img src="https://github.com/JuliaConstraints/Benchmarks/blob/main/ConstraintCommons/visuals/chair_evolution_dictionaries.png?raw=true" alt="Chair Evolution" style="width:48%;"></div>',2))])}const S=o(h,[["render",A]]);export{T as __pageData,S as default};
