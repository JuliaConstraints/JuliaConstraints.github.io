import{_ as t,c as l,a5 as o,j as a,a as i,G as n,B as r,o as p}from"./chunks/framework.CJakPlgM.js";const L=JSON.parse('{"title":"Comparison Layer","description":"","frontmatter":{},"headers":[],"relativePath":"learning/15_comparison.md","filePath":"learning/15_comparison.md","lastUpdated":null}'),d={name:"learning/15_comparison.md"},c={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""};function _(j,s,w,E,N,F){const e=r("Badge");return p(),l("div",null,[s[33]||(s[33]=o('<h1 id="Comparison-Layer" tabindex="-1">Comparison Layer <a class="header-anchor" href="#Comparison-Layer" aria-label="Permalink to &quot;Comparison Layer {#Comparison-Layer}&quot;">​</a></h1><p>Some text to describe the comparison layer within usual ICNs.</p><h2 id="List-of-comparisons" tabindex="-1">List of comparisons <a class="header-anchor" href="#List-of-comparisons" aria-label="Permalink to &quot;List of comparisons {#List-of-comparisons}&quot;">​</a></h2><p>List the possible parameters and how it affects the comparison.</p><h3 id="non-parametric" tabindex="-1">Non-parametric <a class="header-anchor" href="#non-parametric" aria-label="Permalink to &quot;Non-parametric&quot;">​</a></h3>',5)),a("details",c,[a("summary",null,[s[0]||(s[0]=a("a",{id:"CompositionalNetworks.co_identity-learning-15_comparison",href:"#CompositionalNetworks.co_identity-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.co_identity")],-1)),s[1]||(s[1]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[2]||(s[2]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">co_identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Identity function. Already defined in Julia as <code>identity</code>, specialized for scalars in the <code>comparison</code> layer.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L1-L4" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",m,[a("summary",null,[s[3]||(s[3]=a("a",{id:"CompositionalNetworks.co_euclidean-learning-15_comparison",href:"#CompositionalNetworks.co_euclidean-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.co_euclidean")],-1)),s[4]||(s[4]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[5]||(s[5]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">co_euclidean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; dom_size)</span></span></code></pre></div><p>Compute an euclidean norm with domain size <code>dom_size</code> of a scalar.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L33-L36" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",u,[a("summary",null,[s[6]||(s[6]=a("a",{id:"CompositionalNetworks.co_abs_diff_var_vars-learning-15_comparison",href:"#CompositionalNetworks.co_abs_diff_var_vars-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.co_abs_diff_var_vars")],-1)),s[7]||(s[7]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[8]||(s[8]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">co_abs_diff_var_vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; nvars)</span></span></code></pre></div><p>Return the absolute difference between <code>x</code> and the number of variables <code>nvars</code>.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L41-L44" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",h,[a("summary",null,[s[9]||(s[9]=a("a",{id:"CompositionalNetworks.co_var_minus_vars-learning-15_comparison",href:"#CompositionalNetworks.co_var_minus_vars-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.co_var_minus_vars")],-1)),s[10]||(s[10]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[11]||(s[11]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">co_var_minus_vars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; nvars)</span></span></code></pre></div><p>Return the difference <code>x - nvars</code> if positive, <code>0.0</code> otherwise, where <code>nvars</code> denotes the numbers of variables.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L47-L50" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",k,[a("summary",null,[s[12]||(s[12]=a("a",{id:"CompositionalNetworks.co_vars_minus_var-learning-15_comparison",href:"#CompositionalNetworks.co_vars_minus_var-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.co_vars_minus_var")],-1)),s[13]||(s[13]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[14]||(s[14]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">co_vars_minus_var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; nvars)</span></span></code></pre></div><p>Return the difference <code>nvars - x</code> if positive, <code>0.0</code> otherwise, where <code>nvars</code> denotes the numbers of variables.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L53-L56" target="_blank" rel="noreferrer">source</a></p>',3))]),s[34]||(s[34]=a("h3",{id:"Param:-:val",tabindex:"-1"},[i("Param: "),a("code",null,":val"),i(),a("a",{class:"header-anchor",href:"#Param:-:val","aria-label":'Permalink to "Param: `:val` {#Param:-:val}"'},"​")],-1)),a("details",g,[a("summary",null,[s[15]||(s[15]=a("a",{id:"CompositionalNetworks.co_abs_diff_var_val-learning-15_comparison",href:"#CompositionalNetworks.co_abs_diff_var_val-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.co_abs_diff_var_val")],-1)),s[16]||(s[16]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[17]||(s[17]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">co_abs_diff_var_val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; val)</span></span></code></pre></div><p>Return the absolute difference between <code>x</code> and <code>val</code>.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L7-L10" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",b,[a("summary",null,[s[18]||(s[18]=a("a",{id:"CompositionalNetworks.co_var_minus_val-learning-15_comparison",href:"#CompositionalNetworks.co_var_minus_val-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.co_var_minus_val")],-1)),s[19]||(s[19]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[20]||(s[20]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">co_var_minus_val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; val)</span></span></code></pre></div><p>Return the difference <code>x - val</code> if positive, <code>0.0</code> otherwise.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L13-L16" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",v,[a("summary",null,[s[21]||(s[21]=a("a",{id:"CompositionalNetworks.co_val_minus_var-learning-15_comparison",href:"#CompositionalNetworks.co_val_minus_var-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.co_val_minus_var")],-1)),s[22]||(s[22]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[23]||(s[23]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">co_val_minus_var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; val)</span></span></code></pre></div><p>Return the difference <code>val - x</code> if positive, <code>0.0</code> otherwise.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L19-L22" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",y,[a("summary",null,[s[24]||(s[24]=a("a",{id:"CompositionalNetworks.co_euclidean_val-learning-15_comparison",href:"#CompositionalNetworks.co_euclidean_val-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.co_euclidean_val")],-1)),s[25]||(s[25]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[26]||(s[26]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">co_euclidean_val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; val, dom_size)</span></span></code></pre></div><p>Compute an euclidean norm with domain size <code>dom_size</code>, weighted by <code>val</code>, of a scalar.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L25-L28" target="_blank" rel="noreferrer">source</a></p>',3))]),s[35]||(s[35]=a("h3",{id:"Layer-generation",tabindex:"-1"},[i("Layer generation "),a("a",{class:"header-anchor",href:"#Layer-generation","aria-label":'Permalink to "Layer generation {#Layer-generation}"'},"​")],-1)),a("details",C,[a("summary",null,[s[27]||(s[27]=a("a",{id:"CompositionalNetworks.make_comparisons-learning-15_comparison",href:"#CompositionalNetworks.make_comparisons-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.make_comparisons")],-1)),s[28]||(s[28]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[29]||(s[29]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_comparisons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate the comparison functions for the given parameter.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L61-L65" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",f,[a("summary",null,[s[30]||(s[30]=a("a",{id:"CompositionalNetworks.comparison_layer-learning-15_comparison",href:"#CompositionalNetworks.comparison_layer-learning-15_comparison"},[a("span",{class:"jlbinding"},"CompositionalNetworks.comparison_layer")],-1)),s[31]||(s[31]=i()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[32]||(s[32]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparison_layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate the layer of transformations functions of the ICN. Iff <code>param</code> value is set, also includes all the parametric comparison with that value. The operations are mutually exclusive, that is only one will be selected.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/layers/comparison.jl#L88-L91" target="_blank" rel="noreferrer">source</a></p>',3))])])}const B=t(d,[["render",_]]);export{L as __pageData,B as default};
