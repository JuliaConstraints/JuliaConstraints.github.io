import{_ as e,c as l,j as i,a as t,G as n,a5 as a,B as r,o as p}from"./chunks/framework.CJakPlgM.js";const _=JSON.parse('{"title":"CompositionalNetworks.jl","description":"","frontmatter":{},"headers":[],"relativePath":"learning/10_compositional_networks.md","filePath":"learning/10_compositional_networks.md","lastUpdated":null}'),d={name:"learning/10_compositional_networks.md"},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""};function j(w,s,f,v,E,F){const o=r("Badge");return p(),l("div",null,[s[27]||(s[27]=i("h1",{id:"compositionalnetworks-jl",tabindex:"-1"},[t("CompositionalNetworks.jl "),i("a",{class:"header-anchor",href:"#compositionalnetworks-jl","aria-label":'Permalink to "CompositionalNetworks.jl"'},"​")],-1)),s[28]||(s[28]=i("p",null,[t("Documentation for "),i("code",null,"CompositionalNetworks.jl"),t(".")],-1)),s[29]||(s[29]=i("h2",{id:"utilities",tabindex:"-1"},[t("Utilities "),i("a",{class:"header-anchor",href:"#utilities","aria-label":'Permalink to "Utilities"'},"​")],-1)),i("details",k,[i("summary",null,[s[0]||(s[0]=i("a",{id:"CompositionalNetworks.map_tr!-learning-10_compositional_networks",href:"#CompositionalNetworks.map_tr!-learning-10_compositional_networks"},[i("span",{class:"jlbinding"},"CompositionalNetworks.map_tr!")],-1)),s[1]||(s[1]=t()),n(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[2]||(s[2]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map_tr!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, x, X, param)</span></span></code></pre></div><p>Return an anonymous function that applies <code>f</code> to all elements of <code>x</code> and store the result in <code>X</code>, with a parameter <code>param</code> (which is set to <code>nothing</code> for function with no parameter).</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/utils.jl#L1-L4" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",c,[i("summary",null,[s[3]||(s[3]=i("a",{id:"CompositionalNetworks.lazy-learning-10_compositional_networks",href:"#CompositionalNetworks.lazy-learning-10_compositional_networks"},[i("span",{class:"jlbinding"},"CompositionalNetworks.lazy")],-1)),s[4]||(s[4]=t()),n(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[5]||(s[5]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(funcs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate methods extended to a vector instead of one of its components. A function <code>f</code> should have the following signature: <code>f(i::Int, x::V)</code>.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/utils.jl#L22-L25" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",m,[i("summary",null,[s[6]||(s[6]=i("a",{id:"CompositionalNetworks.lazy_param-learning-10_compositional_networks",href:"#CompositionalNetworks.lazy_param-learning-10_compositional_networks"},[i("span",{class:"jlbinding"},"CompositionalNetworks.lazy_param")],-1)),s[7]||(s[7]=t()),n(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[8]||(s[8]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lazy_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(funcs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate methods extended to a vector instead of one of its components. A function <code>f</code> should have the following signature: <code>f(i::Int, x::V; param)</code>.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/utils.jl#L39-L42" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",h,[i("summary",null,[s[9]||(s[9]=i("a",{id:"CompositionalNetworks.as_bitvector-learning-10_compositional_networks",href:"#CompositionalNetworks.as_bitvector-learning-10_compositional_networks"},[i("span",{class:"jlbinding"},"CompositionalNetworks.as_bitvector")],-1)),s[10]||(s[10]=t()),n(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[11]||(s[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">as_bitvector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max_n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n)</span></span></code></pre></div><p>Convert an Int to a BitVector of minimal size (relatively to <code>max_n</code>).</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/utils.jl#L56-L59" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",u,[i("summary",null,[s[12]||(s[12]=i("a",{id:"CompositionalNetworks.as_int-learning-10_compositional_networks",href:"#CompositionalNetworks.as_int-learning-10_compositional_networks"},[i("span",{class:"jlbinding"},"CompositionalNetworks.as_int")],-1)),s[13]||(s[13]=t()),n(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[14]||(s[14]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">as_int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Convert a <code>BitVector</code> into an <code>Int</code>.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/utils.jl#L73-L76" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",g,[i("summary",null,[s[15]||(s[15]=i("a",{id:"CompositionalNetworks.reduce_symbols-learning-10_compositional_networks",href:"#CompositionalNetworks.reduce_symbols-learning-10_compositional_networks"},[i("span",{class:"jlbinding"},"CompositionalNetworks.reduce_symbols")],-1)),s[16]||(s[16]=t()),n(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[17]||(s[17]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reduce_symbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbols, sep)</span></span></code></pre></div><p>Produce a formatted string that separates the symbols by <code>sep</code>. Used internally for <code>show_composition</code>.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/utils.jl#L85-L88" target="_blank" rel="noreferrer">source</a></p>',3))]),s[30]||(s[30]=i("div",{class:"warning custom-block"},[i("p",{class:"custom-block-title"},"Missing docstring."),i("p",null,[t("Missing docstring for "),i("code",null,"CompositionalNeworks.tr_in"),t(". Check Documenter's build log for details.")])],-1)),s[31]||(s[31]=i("h2",{id:"metrics",tabindex:"-1"},[t("Metrics "),i("a",{class:"header-anchor",href:"#metrics","aria-label":'Permalink to "Metrics"'},"​")],-1)),i("details",b,[i("summary",null,[s[18]||(s[18]=i("a",{id:"CompositionalNetworks.hamming-learning-10_compositional_networks",href:"#CompositionalNetworks.hamming-learning-10_compositional_networks"},[i("span",{class:"jlbinding"},"CompositionalNetworks.hamming")],-1)),s[19]||(s[19]=t()),n(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[20]||(s[20]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hamming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, X)</span></span></code></pre></div><p>Compute the hamming distance of <code>x</code> over a collection of solutions <code>X</code>, i.e. the minimal number of variables to switch in <code>x</code>to reach a solution.</p><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/metrics.jl#L1-L4" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",C,[i("summary",null,[s[21]||(s[21]=i("a",{id:"CompositionalNetworks.minkowski-learning-10_compositional_networks",href:"#CompositionalNetworks.minkowski-learning-10_compositional_networks"},[i("span",{class:"jlbinding"},"CompositionalNetworks.minkowski")],-1)),s[22]||(s[22]=t()),n(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[23]||(s[23]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minkowski</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, X, p)</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/metrics.jl#L7-L9" target="_blank" rel="noreferrer">source</a></p>',2))]),i("details",y,[i("summary",null,[s[24]||(s[24]=i("a",{id:"CompositionalNetworks.manhattan-learning-10_compositional_networks",href:"#CompositionalNetworks.manhattan-learning-10_compositional_networks"},[i("span",{class:"jlbinding"},"CompositionalNetworks.manhattan")],-1)),s[25]||(s[25]=t()),n(o,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[26]||(s[26]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">manhattan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, X)</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CompositionalNetworks.jl/blob/v0.5.9/src/metrics.jl#L12-L14" target="_blank" rel="noreferrer">source</a></p>',2))]),s[32]||(s[32]=i("div",{class:"warning custom-block"},[i("p",{class:"custom-block-title"},"Missing docstring."),i("p",null,[t("Missing docstring for "),i("code",null,"weigths_bias"),t(". Check Documenter's build log for details.")])],-1))])}const x=e(d,[["render",j]]);export{_ as __pageData,x as default};
