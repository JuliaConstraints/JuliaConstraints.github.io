import{_ as n,c as p,j as i,a as t,G as e,a5 as l,B as r,o}from"./chunks/framework.CJakPlgM.js";const Vs=JSON.parse('{"title":"CBLS.jl","description":"","frontmatter":{},"headers":[],"relativePath":"solvers/10_cbls.md","filePath":"solvers/10_cbls.md","lastUpdated":null}'),h={name:"solvers/10_cbls.md"},d={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},$={class:"jldocstring custom-block",open:""},W={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},K={class:"jldocstring custom-block",open:""},Q={class:"jldocstring custom-block",open:""},Y={class:"jldocstring custom-block",open:""},Z={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},ss={class:"jldocstring custom-block",open:""},is={class:"jldocstring custom-block",open:""},ts={class:"jldocstring custom-block",open:""},as={class:"jldocstring custom-block",open:""},es={class:"jldocstring custom-block",open:""},ls={class:"jldocstring custom-block",open:""},ns={class:"jldocstring custom-block",open:""},ps={class:"jldocstring custom-block",open:""},rs={class:"jldocstring custom-block",open:""},os={class:"jldocstring custom-block",open:""},hs={class:"jldocstring custom-block",open:""},ds={class:"jldocstring custom-block",open:""},ks={class:"jldocstring custom-block",open:""},gs={class:"jldocstring custom-block",open:""},us={class:"jldocstring custom-block",open:""},cs={class:"jldocstring custom-block",open:""},ys={class:"jldocstring custom-block",open:""},bs={class:"jldocstring custom-block",open:""},Es={class:"jldocstring custom-block",open:""},Cs={class:"jldocstring custom-block",open:""},ms={class:"jldocstring custom-block",open:""},Fs={class:"jldocstring custom-block",open:""},js={class:"jldocstring custom-block",open:""},vs={class:"jldocstring custom-block",open:""},fs={class:"jldocstring custom-block",open:""},Bs={class:"jldocstring custom-block",open:""},Os={class:"jldocstring custom-block",open:""},Ls={class:"jldocstring custom-block",open:""},Ss={class:"jldocstring custom-block",open:""};function Is(Ts,s,Ms,As,Ds,xs){const a=r("Badge");return o(),p("div",null,[s[222]||(s[222]=i("h1",{id:"cbls-jl",tabindex:"-1"},[t("CBLS.jl "),i("a",{class:"header-anchor",href:"#cbls-jl","aria-label":'Permalink to "CBLS.jl"'},"​")],-1)),s[223]||(s[223]=i("p",null,[t("Documentation for "),i("code",null,"CBLS.jl"),t(".")],-1)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"CBLS.AllDifferent",href:"#CBLS.AllDifferent"},[i("span",{class:"jlbinding"},"CBLS.AllDifferent")],-1)),s[1]||(s[1]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[2]||(s[2]=l('<p>Global constraint ensuring that all the values of a given configuration are unique.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AllDifferent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/all_different.jl#L31-L37" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",k,[i("summary",null,[s[3]||(s[3]=i("a",{id:"CBLS.AllEqual",href:"#CBLS.AllEqual"},[i("span",{class:"jlbinding"},"CBLS.AllEqual")],-1)),s[4]||(s[4]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[5]||(s[5]=l('<p>Global constraint ensuring that all the values of <code>X</code> are all equal.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AllEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/all_equal.jl#L41-L47" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",g,[i("summary",null,[s[6]||(s[6]=i("a",{id:"CBLS.AtLeast",href:"#CBLS.AtLeast"},[i("span",{class:"jlbinding"},"CBLS.AtLeast")],-1)),s[7]||(s[7]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[8]||(s[8]=l('<p>Constraint ensuring that the number of occurrences of the values in <code>vals</code> in <code>x</code> is at least <code>val</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AtLeast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val, vals))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/count.jl#L77-L83" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",u,[i("summary",null,[s[9]||(s[9]=i("a",{id:"CBLS.AtMost",href:"#CBLS.AtMost"},[i("span",{class:"jlbinding"},"CBLS.AtMost")],-1)),s[10]||(s[10]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=l('<p>Constraint ensuring that the number of occurrences of the values in <code>vals</code> in <code>x</code> is at most <code>val</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AtMost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val, vals))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/count.jl#L102-L108" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",c,[i("summary",null,[s[12]||(s[12]=i("a",{id:"CBLS.Conflicts",href:"#CBLS.Conflicts"},[i("span",{class:"jlbinding"},"CBLS.Conflicts")],-1)),s[13]||(s[13]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[14]||(s[14]=l('<p>Global constraint ensuring that the tuple <code>x</code> does not match any configuration listed within the conflict set <code>pair_vars</code>. This constraint, originating from the extension model, stipulates that <code>x</code> must avoid all configurations defined as conflicts: <code>x ∉ pair_vars</code>. It is useful for specifying tuples that are explicitly forbidden and should be excluded from the solution space.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Conflicts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; pair_vars))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/extension.jl#L155-L161" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",y,[i("summary",null,[s[15]||(s[15]=i("a",{id:"CBLS.Count",href:"#CBLS.Count"},[i("span",{class:"jlbinding"},"CBLS.Count")],-1)),s[16]||(s[16]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[17]||(s[17]=l('<p>Global constraint ensuring that the number of occurrences of <code>val</code> in <code>X</code> is equal to <code>count</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count, val, vals))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/count.jl#L50-L56" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",b,[i("summary",null,[s[18]||(s[18]=i("a",{id:"CBLS.Cumulative",href:"#CBLS.Cumulative"},[i("span",{class:"jlbinding"},"CBLS.Cumulative")],-1)),s[19]||(s[19]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[20]||(s[20]=l('<p>Global constraint ensuring that the cumulative sum of the heights of the tasks is less than or equal to <code>val</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Cumulative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; pair_vars, op, val))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/cumulative.jl#L45-L51" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",E,[i("summary",null,[s[21]||(s[21]=i("a",{id:"CBLS.DiscreteSet",href:"#CBLS.DiscreteSet"},[i("span",{class:"jlbinding"},"CBLS.DiscreteSet")],-1)),s[22]||(s[22]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscreteSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values)</span></span></code></pre></div><p>Create a discrete set of values.</p><p><strong>Arguments</strong></p><ul><li><code>values::Vector{T}</code>: A vector of values to include in the set.</li></ul><p><strong>Returns</strong></p><ul><li><code>DiscreteSet{T}</code>: A discrete set containing the specified values.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L151-L161" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",C,[i("summary",null,[s[24]||(s[24]=i("a",{id:"CBLS.DistDifferent",href:"#CBLS.DistDifferent"},[i("span",{class:"jlbinding"},"CBLS.DistDifferent")],-1)),s[25]||(s[25]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[26]||(s[26]=i("p",null,[t("A constraint ensuring that the distances between marks on the ruler are unique. Specifically, it checks that the distance between "),i("code",null,"x[1]"),t(" and "),i("code",null,"x[2]"),t(", and the distance between "),i("code",null,"x[3]"),t(" and "),i("code",null,"x[4]"),t(", are different. This constraint is fundamental in ensuring the validity of a Golomb ruler, where no two pairs of marks should have the same distance between them.")],-1)),s[27]||(s[27]=i("p",null,[i("a",{href:"https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/intention.jl#L35-L37",target:"_blank",rel:"noreferrer"},"source")],-1))]),i("details",m,[i("summary",null,[s[28]||(s[28]=i("a",{id:"CBLS.Element",href:"#CBLS.Element"},[i("span",{class:"jlbinding"},"CBLS.Element")],-1)),s[29]||(s[29]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[30]||(s[30]=l('<p>Global constraint ensuring that the value of <code>X</code> at index <code>id</code> is equal to <code>val</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/element.jl#L40-L46" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",F,[i("summary",null,[s[31]||(s[31]=i("a",{id:"CBLS.Error",href:"#CBLS.Error"},[i("span",{class:"jlbinding"},"CBLS.Error")],-1)),s[32]||(s[32]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[33]||(s[33]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Error{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JuMP.AbstractVectorSet</span></span></code></pre></div><p>The solver will compute a straightforward error function based on the <code>concept</code>. To run the solver efficiently, it is possible to provide an <em>error function</em> <code>err</code> instead of <code>concept</code>. <code>err</code> must return a nonnegative real number.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L59-L67" target="_blank" rel="noreferrer">source</a></p>',4))]),i("details",j,[i("summary",null,[s[34]||(s[34]=i("a",{id:"CBLS.Exactly",href:"#CBLS.Exactly"},[i("span",{class:"jlbinding"},"CBLS.Exactly")],-1)),s[35]||(s[35]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[36]||(s[36]=l('<p>Constraint ensuring that the number of occurrences of the values in <code>vals</code> in <code>x</code> is exactly <code>val</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exactly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val, vals))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/count.jl#L127-L133" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",v,[i("summary",null,[s[37]||(s[37]=i("a",{id:"CBLS.Extension",href:"#CBLS.Extension"},[i("span",{class:"jlbinding"},"CBLS.Extension")],-1)),s[38]||(s[38]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[39]||(s[39]=i("p",null,[t("Global constraint enforcing that the tuple "),i("code",null,"x"),t(" matches a configuration within the supports set "),i("code",null,"pair_vars[1]"),t(" or does not match any configuration within the conflicts set "),i("code",null,"pair_vars[2]"),t(". It embodies the logic: "),i("code",null,"x ∈ pair_vars[1] || x ∉ pair_vars[2]"),t(", providing a comprehensive way to define valid (supported) and invalid (conflicted) tuples for constraint satisfaction problems. This constraint is versatile, allowing for the explicit delineation of both acceptable and unacceptable configurations.")],-1)),s[40]||(s[40]=i("p",null,[i("a",{href:"https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/extension.jl#L41-L43",target:"_blank",rel:"noreferrer"},"source")],-1))]),i("details",f,[i("summary",null,[s[41]||(s[41]=i("a",{id:"CBLS.Instantiation",href:"#CBLS.Instantiation"},[i("span",{class:"jlbinding"},"CBLS.Instantiation")],-1)),s[42]||(s[42]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[43]||(s[43]=i("p",null,"The instantiation constraint is a global constraint used in constraint programming that ensures that a list of variables takes on a specific set of values in a specific order.",-1)),s[44]||(s[44]=i("p",null,[i("a",{href:"https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/instantiation.jl#L37-L39",target:"_blank",rel:"noreferrer"},"source")],-1))]),i("details",B,[i("summary",null,[s[45]||(s[45]=i("a",{id:"CBLS.Intention",href:"#CBLS.Intention"},[i("span",{class:"jlbinding"},"CBLS.Intention")],-1)),s[46]||(s[46]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[47]||(s[47]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Intention{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JuMP.AbstractVectorSet</span></span></code></pre></div><p>Represents an intention set in the model.</p><p><strong>Arguments</strong></p><ul><li><code>f::F</code>: A function representing the intention.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L156-L163" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",O,[i("summary",null,[s[48]||(s[48]=i("a",{id:"CBLS.MDDConstraint",href:"#CBLS.MDDConstraint"},[i("span",{class:"jlbinding"},"CBLS.MDDConstraint")],-1)),s[49]||(s[49]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[50]||(s[50]=l('<p>Multi-valued Decision Diagram (MDD) constraint.</p><p>The MDD constraint is a constraint that can be used to model a wide range of problems. It is a directed graph where each node is labeled with a value and each edge is labeled with a value. The constraint is satisfied if there is a path from the first node to the last node such that the sequence of edge labels is a valid sequence of the value labels.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MDDConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; language))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/mdd.jl#L38-L46" target="_blank" rel="noreferrer">source</a></p>',4))]),i("details",L,[i("summary",null,[s[51]||(s[51]=i("a",{id:"CBLS.MOIAllDifferent",href:"#CBLS.MOIAllDifferent"},[i("span",{class:"jlbinding"},"CBLS.MOIAllDifferent")],-1)),s[52]||(s[52]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[53]||(s[53]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIAllDifferent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/all_different.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",S,[i("summary",null,[s[54]||(s[54]=i("a",{id:"CBLS.MOIAllEqual",href:"#CBLS.MOIAllEqual"},[i("span",{class:"jlbinding"},"CBLS.MOIAllEqual")],-1)),s[55]||(s[55]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[56]||(s[56]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIAllEqual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/all_equal.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",I,[i("summary",null,[s[57]||(s[57]=i("a",{id:"CBLS.MOIConflicts",href:"#CBLS.MOIConflicts"},[i("span",{class:"jlbinding"},"CBLS.MOIConflicts")],-1)),s[58]||(s[58]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[59]||(s[59]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIConflicts{T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vector{Vector{T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/extension.jl#L117-L121" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",T,[i("summary",null,[s[60]||(s[60]=i("a",{id:"CBLS.MOICumulative",href:"#CBLS.MOICumulative"},[i("span",{class:"jlbinding"},"CBLS.MOICumulative")],-1)),s[61]||(s[61]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[62]||(s[62]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOICumulative{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/cumulative.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",M,[i("summary",null,[s[63]||(s[63]=i("a",{id:"CBLS.MOIDistDifferent",href:"#CBLS.MOIDistDifferent"},[i("span",{class:"jlbinding"},"CBLS.MOIDistDifferent")],-1)),s[64]||(s[64]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[65]||(s[65]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIDistDifferent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/intention.jl#L3-L7" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",A,[i("summary",null,[s[66]||(s[66]=i("a",{id:"CBLS.MOIElement",href:"#CBLS.MOIElement"},[i("span",{class:"jlbinding"},"CBLS.MOIElement")],-1)),s[67]||(s[67]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[68]||(s[68]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIElement{I </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union{Nothing, Number}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/element.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",D,[i("summary",null,[s[69]||(s[69]=i("a",{id:"CBLS.MOIError",href:"#CBLS.MOIError"},[i("span",{class:"jlbinding"},"CBLS.MOIError")],-1)),s[70]||(s[70]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[71]||(s[71]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIError{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><strong>Arguments:</strong></p><ul><li><p><code>f::F</code>: DESCRIPTION</p></li><li><p><code>dimension::Int</code>: DESCRIPTION</p></li><li><p><code>MOIError(f, dim = 0) = begin #= none:5 =# new{typeof(f)}(f, dim) end</code>: DESCRIPTION</p></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L1-L13" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",x,[i("summary",null,[s[72]||(s[72]=i("a",{id:"CBLS.MOIExtension",href:"#CBLS.MOIExtension"},[i("span",{class:"jlbinding"},"CBLS.MOIExtension")],-1)),s[73]||(s[73]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[74]||(s[74]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIExtension{T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union{Vector{Vector{T}}, Tuple{Vector{T}, Vector{T}}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DOCSTRING</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/extension.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>`,2))]),i("details",z,[i("summary",null,[s[75]||(s[75]=i("a",{id:"CBLS.MOIInstantiation",href:"#CBLS.MOIInstantiation"},[i("span",{class:"jlbinding"},"CBLS.MOIInstantiation")],-1)),s[76]||(s[76]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[77]||(s[77]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIInstantiation{T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/instantiation.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",V,[i("summary",null,[s[78]||(s[78]=i("a",{id:"CBLS.MOIIntention",href:"#CBLS.MOIIntention"},[i("span",{class:"jlbinding"},"CBLS.MOIIntention")],-1)),s[79]||(s[79]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[80]||(s[80]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIIntention{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>Represents an intention set in the model.</p><p><strong>Arguments</strong></p><ul><li><p><code>f::F</code>: A function representing the intention.</p></li><li><p><code>dimension::Int</code>: The dimension of the vector set.</p></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L75-L83" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",N,[i("summary",null,[s[81]||(s[81]=i("a",{id:"CBLS.MOIMaximum",href:"#CBLS.MOIMaximum"},[i("span",{class:"jlbinding"},"CBLS.MOIMaximum")],-1)),s[82]||(s[82]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[83]||(s[83]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIMaximum {F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/maximum.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",J,[i("summary",null,[s[84]||(s[84]=i("a",{id:"CBLS.MOIMinimum",href:"#CBLS.MOIMinimum"},[i("span",{class:"jlbinding"},"CBLS.MOIMinimum")],-1)),s[85]||(s[85]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[86]||(s[86]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIMinimum {F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/minimum.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",w,[i("summary",null,[s[87]||(s[87]=i("a",{id:"CBLS.MOIMultivaluedDecisionDiagram",href:"#CBLS.MOIMultivaluedDecisionDiagram"},[i("span",{class:"jlbinding"},"CBLS.MOIMultivaluedDecisionDiagram")],-1)),s[88]||(s[88]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[89]||(s[89]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIMultivaluedDecisionDiagram{L </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ConstraintCommons.AbstractMultivaluedDecisionDiagram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/mdd.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",R,[i("summary",null,[s[90]||(s[90]=i("a",{id:"CBLS.MOINValues",href:"#CBLS.MOINValues"},[i("span",{class:"jlbinding"},"CBLS.MOINValues")],-1)),s[91]||(s[91]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[92]||(s[92]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOINValues{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vector{T2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/n_values.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",P,[i("summary",null,[s[93]||(s[93]=i("a",{id:"CBLS.MOINoOverlap",href:"#CBLS.MOINoOverlap"},[i("span",{class:"jlbinding"},"CBLS.MOINoOverlap")],-1)),s[94]||(s[94]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[95]||(s[95]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOINoOverlap{I </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/no_overlap.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",G,[i("summary",null,[s[96]||(s[96]=i("a",{id:"CBLS.MOIOrdered",href:"#CBLS.MOIOrdered"},[i("span",{class:"jlbinding"},"CBLS.MOIOrdered")],-1)),s[97]||(s[97]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[98]||(s[98]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIOrdered{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/ordered.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",X,[i("summary",null,[s[99]||(s[99]=i("a",{id:"CBLS.MOIRegular",href:"#CBLS.MOIRegular"},[i("span",{class:"jlbinding"},"CBLS.MOIRegular")],-1)),s[100]||(s[100]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[101]||(s[101]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOIRegular{L </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ConstraintCommons.AbstractAutomaton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/regular.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",U,[i("summary",null,[s[102]||(s[102]=i("a",{id:"CBLS.MOISum",href:"#CBLS.MOISum"},[i("span",{class:"jlbinding"},"CBLS.MOISum")],-1)),s[103]||(s[103]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[104]||(s[104]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOISum{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/sum.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",q,[i("summary",null,[s[105]||(s[105]=i("a",{id:"CBLS.MOISupports",href:"#CBLS.MOISupports"},[i("span",{class:"jlbinding"},"CBLS.MOISupports")],-1)),s[106]||(s[106]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[107]||(s[107]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOISupports{T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vector{Vector{T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractVectorSet</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/extension.jl#L60-L64" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",$,[i("summary",null,[s[108]||(s[108]=i("a",{id:"CBLS.Maximum",href:"#CBLS.Maximum"},[i("span",{class:"jlbinding"},"CBLS.Maximum")],-1)),s[109]||(s[109]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[110]||(s[110]=l('<p>Global constraint ensuring that the maximum value in the tuple <code>x</code> satisfies the condition <code>op(x) val</code>. This constraint is useful for specifying that the maximum value in the tuple must satisfy a certain condition.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Maximum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/maximum.jl#L37-L43" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",W,[i("summary",null,[s[111]||(s[111]=i("a",{id:"CBLS.Minimum",href:"#CBLS.Minimum"},[i("span",{class:"jlbinding"},"CBLS.Minimum")],-1)),s[112]||(s[112]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[113]||(s[113]=l('<p>Global constraint ensuring that the minimum value in the tuple <code>x</code> satisfies the condition <code>op(x) val</code>. This constraint is useful for specifying that the minimum value in the tuple must satisfy a certain condition.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Minimum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/minimum.jl#L37-L43" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",H,[i("summary",null,[s[114]||(s[114]=i("a",{id:"CBLS.NValues",href:"#CBLS.NValues"},[i("span",{class:"jlbinding"},"CBLS.NValues")],-1)),s[115]||(s[115]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[116]||(s[116]=i("p",null,[t("Global constraint ensuring that the number of distinct values in "),i("code",null,"X"),t(" satisfies the given condition.")],-1)),s[117]||(s[117]=i("p",null,[i("a",{href:"https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/n_values.jl#L43-L45",target:"_blank",rel:"noreferrer"},"source")],-1))]),i("details",K,[i("summary",null,[s[118]||(s[118]=i("a",{id:"CBLS.NoOverlap",href:"#CBLS.NoOverlap"},[i("span",{class:"jlbinding"},"CBLS.NoOverlap")],-1)),s[119]||(s[119]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[120]||(s[120]=l('<p>Global constraint ensuring that the tuple <code>x</code> does not overlap with any configuration listed within the pair set <code>pair_vars</code>. This constraint, originating from the extension model, stipulates that <code>x</code> must avoid all configurations defined as pairs: <code>x ∩ pair_vars = ∅</code>. It is useful for specifying tuples that are explicitly forbidden and should be excluded from the solution space.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NoOverlap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; bool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pair_vars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/no_overlap.jl#L48-L54" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",Q,[i("summary",null,[s[121]||(s[121]=i("a",{id:"CBLS.Optimizer",href:"#CBLS.Optimizer"},[i("span",{class:"jlbinding"},"CBLS.Optimizer")],-1)),s[122]||(s[122]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[123]||(s[123]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Create an instance of the Optimizer.</p><p><strong>Arguments</strong></p><ul><li><p><code>model</code>: The model to be optimized.</p></li><li><p><code>options::Options</code>: Options for configuring the solver.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Optimizer</code>: An instance of the optimizer.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L37-L48" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",Y,[i("summary",null,[s[124]||(s[124]=i("a",{id:"CBLS.Optimizer-2",href:"#CBLS.Optimizer-2"},[i("span",{class:"jlbinding"},"CBLS.Optimizer")],-1)),s[125]||(s[125]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[126]||(s[126]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Optimizer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractOptimizer</span></span></code></pre></div><p>Defines an optimizer for CBLS.</p><p><strong>Fields</strong></p><ul><li><p><code>solver::LS.MainSolver</code>: The main solver used for local search.</p></li><li><p><code>int_vars::Set{Int}</code>: Set of integer variables.</p></li><li><p><code>compare_vars::Set{Int}</code>: Set of variables to compare.</p></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L21-L30" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",Z,[i("summary",null,[s[127]||(s[127]=i("a",{id:"CBLS.Ordered",href:"#CBLS.Ordered"},[i("span",{class:"jlbinding"},"CBLS.Ordered")],-1)),s[128]||(s[128]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[129]||(s[129]=i("p",null,[t("Global constraint ensuring that the variables are ordered according to "),i("code",null,"op"),t(".")],-1)),s[130]||(s[130]=i("p",null,[i("a",{href:"https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/ordered.jl#L45-L47",target:"_blank",rel:"noreferrer"},"source")],-1))]),i("details",_,[i("summary",null,[s[131]||(s[131]=i("a",{id:"CBLS.Predicate",href:"#CBLS.Predicate"},[i("span",{class:"jlbinding"},"CBLS.Predicate")],-1)),s[132]||(s[132]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[133]||(s[133]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Predicate{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JuMP.AbstractVectorSet</span></span></code></pre></div><p>Deprecated: Use <code>Intention</code> instead.</p><p>Represents a predicate set in the model.</p><p><strong>Arguments</strong></p><ul><li><code>f::F</code>: A function representing the predicate.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L142-L151" target="_blank" rel="noreferrer">source</a></p>',6))]),i("details",ss,[i("summary",null,[s[134]||(s[134]=i("a",{id:"CBLS.Regular",href:"#CBLS.Regular"},[i("span",{class:"jlbinding"},"CBLS.Regular")],-1)),s[135]||(s[135]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[136]||(s[136]=l('<p>Ensures that a sequence <code>x</code> (interpreted as a word) is accepted by the regular language represented by a given automaton. This constraint verifies the compliance of <code>x</code> with the language rules encoded within the <code>automaton</code> parameter, which must be an instance of <code>&lt;:AbstractAutomaton</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RegularConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; language))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/regular.jl#L35-L41" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",is,[i("summary",null,[s[137]||(s[137]=i("a",{id:"CBLS.ScalarFunction",href:"#CBLS.ScalarFunction"},[i("span",{class:"jlbinding"},"CBLS.ScalarFunction")],-1)),s[138]||(s[138]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[139]||(s[139]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ScalarFunction{F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union{Nothing, VOV}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractScalarFunction</span></span></code></pre></div><p>A container to express any function with real value in JuMP syntax. Used with the <code>@objective</code> macro.</p><p><strong>Arguments:</strong></p><ul><li><p><code>f::F</code>: function to be applied to <code>X</code></p></li><li><p><code>X::V</code>: a subset of the variables of the model.</p></li></ul><p>Given a <code>model</code>, and some (collection of) variables <code>X</code> to optimize. an objective function <code>f</code> can be added as follows. Note that only <code>Min</code> for minimization us currently defined. <code>Max</code> will come soon.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Applies to all variables in order of insertion.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Recommended only when the function argument order does not matter.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@objective</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ScalarFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generic use</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@objective</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ScalarFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, X))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/objectives.jl#L9-L28" target="_blank" rel="noreferrer">source</a></p>`,7))]),i("details",ts,[i("summary",null,[s[140]||(s[140]=i("a",{id:"CBLS.Sum",href:"#CBLS.Sum"},[i("span",{class:"jlbinding"},"CBLS.Sum")],-1)),s[141]||(s[141]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[142]||(s[142]=i("p",null,[t("Global constraint ensuring that the sum of the variables in "),i("code",null,"x"),t(" satisfies a given condition.")],-1)),s[143]||(s[143]=i("p",null,[i("a",{href:"https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/sum.jl#L46-L48",target:"_blank",rel:"noreferrer"},"source")],-1))]),i("details",as,[i("summary",null,[s[144]||(s[144]=i("a",{id:"CBLS.Supports",href:"#CBLS.Supports"},[i("span",{class:"jlbinding"},"CBLS.Supports")],-1)),s[145]||(s[145]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[146]||(s[146]=l('<p>Global constraint ensuring that the tuple <code>x</code> matches a configuration listed within the support set <code>pair_vars</code>. This constraint is derived from the extension model, specifying that <code>x</code> must be one of the explicitly defined supported configurations: <code>x ∈ pair_vars</code>. It is utilized to directly declare the tuples that are valid and should be included in the solution space.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Supports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; pair_vars))</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints/extension.jl#L97-L103" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",es,[i("summary",null,[s[147]||(s[147]=i("a",{id:"Base.copy-Tuple{CBLS.MOIError}",href:"#Base.copy-Tuple{CBLS.MOIError}"},[i("span",{class:"jlbinding"},"Base.copy")],-1)),s[148]||(s[148]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[149]||(s[149]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOIError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> begin</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L52-L56" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",ls,[i("summary",null,[s[150]||(s[150]=i("a",{id:"Base.copy-Tuple{CBLS.MOIIntention}",href:"#Base.copy-Tuple{CBLS.MOIIntention}"},[i("span",{class:"jlbinding"},"Base.copy")],-1)),s[151]||(s[151]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[152]||(s[152]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOIIntention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Copy an intention set.</p><p><strong>Arguments</strong></p><ul><li><code>set::MOIIntention</code>: The intention set to be copied.</li></ul><p><strong>Returns</strong></p><ul><li><code>MOIIntention</code>: A copy of the intention set.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L129-L139" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",ns,[i("summary",null,[s[153]||(s[153]=i("a",{id:"Base.copy-Tuple{DiscreteSet}",href:"#Base.copy-Tuple{DiscreteSet}"},[i("span",{class:"jlbinding"},"Base.copy")],-1)),s[154]||(s[154]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[155]||(s[155]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscreteSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Copy a discrete set.</p><p><strong>Arguments</strong></p><ul><li><code>set::DiscreteSet</code>: The discrete set to be copied.</li></ul><p><strong>Returns</strong></p><ul><li><code>DiscreteSet</code>: A copy of the discrete set.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L168-L178" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",ps,[i("summary",null,[s[156]||(s[156]=i("a",{id:"Base.copy-Tuple{F} where F<:Function",href:"#Base.copy-Tuple{F} where F<:Function"},[i("span",{class:"jlbinding"},"Base.copy")],-1)),s[157]||(s[157]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[158]||(s[158]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Copy a function.</p><p><strong>Arguments</strong></p><ul><li><code>op::F</code>: The function to be copied.</li></ul><p><strong>Returns</strong></p><ul><li><code>F</code>: The copied function.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L210-L220" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",rs,[i("summary",null,[s[159]||(s[159]=i("a",{id:"Base.copy-Tuple{Nothing}",href:"#Base.copy-Tuple{Nothing}"},[i("span",{class:"jlbinding"},"Base.copy")],-1)),s[160]||(s[160]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[161]||(s[161]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Copy a <code>Nothing</code> value.</p><p><strong>Arguments</strong></p><ul><li><code>::Nothing</code>: The <code>Nothing</code> value to be copied.</li></ul><p><strong>Returns</strong></p><ul><li><code>Nothing</code>: The copied <code>Nothing</code> value.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L223-L233" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",os,[i("summary",null,[s[162]||(s[162]=i("a",{id:"JuMP.build_variable-Union{Tuple{T}, Tuple{Function, JuMP.VariableInfo, T}} where T<:MathOptInterface.AbstractScalarSet",href:"#JuMP.build_variable-Union{Tuple{T}, Tuple{Function, JuMP.VariableInfo, T}} where T<:MathOptInterface.AbstractScalarSet"},[i("span",{class:"jlbinding"},"JuMP.build_variable")],-1)),s[163]||(s[163]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[164]||(s[164]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JuMP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build_variable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JuMP.VariableInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MOI.AbstractScalarSet</span></span></code></pre></div><p>Create a variable constrained by a scalar set.</p><p><strong>Arguments</strong></p><ul><li><p><code>info::JuMP.VariableInfo</code>: Information about the variable to be created.</p></li><li><p><code>set::T where T &lt;: MOI.AbstractScalarSet</code>: The set defining the constraints on the variable.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>JuMP.VariableConstrainedOnCreation</code>: A variable constrained by the specified set.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L1-L12" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",hs,[i("summary",null,[s[165]||(s[165]=i("a",{id:"JuMP.moi_set-Tuple{Intention, Int64}",href:"#JuMP.moi_set-Tuple{Intention, Int64}"},[i("span",{class:"jlbinding"},"JuMP.moi_set")],-1)),s[166]||(s[166]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[167]||(s[167]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JuMP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">moi_set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Intention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MOIIntention</span></span></code></pre></div><p>Convert an <code>Intention</code> set to a <code>MOIIntention</code> set.</p><p><strong>Arguments</strong></p><ul><li><p><code>set::Intention</code>: The intention set to be converted.</p></li><li><p><code>dim::Int</code>: The dimension of the vector set.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>MOIIntention</code>: The converted MOIIntention set.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L182-L193" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",ds,[i("summary",null,[s[168]||(s[168]=i("a",{id:"JuMP.moi_set-Tuple{Predicate, Int64}",href:"#JuMP.moi_set-Tuple{Predicate, Int64}"},[i("span",{class:"jlbinding"},"JuMP.moi_set")],-1)),s[169]||(s[169]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[170]||(s[170]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JuMP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">moi_set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Predicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MOIIntention</span></span></code></pre></div><p>Convert a <code>Predicate</code> set to a <code>MOIIntention</code> set.</p><p><strong>Arguments</strong></p><ul><li><p><code>set::Predicate</code>: The predicate set to be converted.</p></li><li><p><code>dim::Int</code>: The dimension of the vector set.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>MOIIntention</code>: The converted MOIIntention set.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L168-L179" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",ks,[i("summary",null,[s[171]||(s[171]=i("a",{id:"MathOptInterface.add_constraint-Union{Tuple{F}, Tuple{CBLS.Optimizer, MathOptInterface.VectorOfVariables, CBLS.MOIError{F}}} where F<:Function",href:"#MathOptInterface.add_constraint-Union{Tuple{F}, Tuple{CBLS.Optimizer, MathOptInterface.VectorOfVariables, CBLS.MOIError{F}}} where F<:Function"},[i("span",{class:"jlbinding"},"MathOptInterface.add_constraint")],-1)),s[172]||(s[172]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[173]||(s[173]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optimizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vars</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOI.VectorOfVariables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOIError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>DOCSTRING</p><p><strong>Arguments:</strong></p><ul><li><p><code>optimizer</code>: DESCRIPTION</p></li><li><p><code>vars</code>: DESCRIPTION</p></li><li><p><code>set</code>: DESCRIPTION</p></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L36-L45" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",gs,[i("summary",null,[s[174]||(s[174]=i("a",{id:"MathOptInterface.add_constraint-Union{Tuple{F}, Tuple{CBLS.Optimizer, MathOptInterface.VectorOfVariables, CBLS.MOIIntention{F}}} where F<:Function",href:"#MathOptInterface.add_constraint-Union{Tuple{F}, Tuple{CBLS.Optimizer, MathOptInterface.VectorOfVariables, CBLS.MOIIntention{F}}} where F<:Function"},[i("span",{class:"jlbinding"},"MathOptInterface.add_constraint")],-1)),s[175]||(s[175]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[176]||(s[176]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optimizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vars</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOI.VectorOfVariables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOIIntention{F}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Add an intention constraint to the optimizer.</p><p><strong>Arguments</strong></p><ul><li><p><code>optimizer::Optimizer</code>: The optimizer instance.</p></li><li><p><code>vars::MOI.VectorOfVariables</code>: The variables for the constraint.</p></li><li><p><code>set::MOIIntention{F}</code>: The intention set defining the constraint.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>CI{VOV, MOIIntention{F}}</code>: The constraint index.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L109-L121" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",us,[i("summary",null,[s[177]||(s[177]=i("a",{id:"MathOptInterface.add_constraint-Union{Tuple{T}, Tuple{CBLS.Optimizer, MathOptInterface.VariableIndex, DiscreteSet{T}}} where T<:Number",href:"#MathOptInterface.add_constraint-Union{Tuple{T}, Tuple{CBLS.Optimizer, MathOptInterface.VariableIndex, DiscreteSet{T}}} where T<:Number"},[i("span",{class:"jlbinding"},"MathOptInterface.add_constraint")],-1)),s[178]||(s[178]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[179]||(s[179]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optimizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscreteSet{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Number</span></span></code></pre></div><p>DOCSTRING</p><p><strong>Arguments:</strong></p><ul><li><p><code>optimizer</code>: DESCRIPTION</p></li><li><p><code>v</code>: DESCRIPTION</p></li><li><p><code>set</code>: DESCRIPTION</p></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/variables.jl#L37-L46" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",cs,[i("summary",null,[s[180]||(s[180]=i("a",{id:"MathOptInterface.add_variable-Tuple{CBLS.Optimizer}",href:"#MathOptInterface.add_variable-Tuple{CBLS.Optimizer}"},[i("span",{class:"jlbinding"},"MathOptInterface.add_variable")],-1)),s[181]||(s[181]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[182]||(s[182]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_variable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> begin</span></span></code></pre></div><p>DOCSTRING</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/variables.jl#L2-L6" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",ys,[i("summary",null,[s[183]||(s[183]=i("a",{id:"MathOptInterface.copy_to-Tuple{CBLS.Optimizer, MathOptInterface.ModelLike}",href:"#MathOptInterface.copy_to-Tuple{CBLS.Optimizer, MathOptInterface.ModelLike}"},[i("span",{class:"jlbinding"},"MathOptInterface.copy_to")],-1)),s[184]||(s[184]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[185]||(s[185]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">copy_to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOI.ModelLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Copy the source model to the optimizer.</p><p><strong>Arguments</strong></p><ul><li><p><code>model::Optimizer</code>: The optimizer instance.</p></li><li><p><code>src::MOI.ModelLike</code>: The source model to be copied.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Nothing</code></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L122-L133" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",bs,[i("summary",null,[s[186]||(s[186]=i("a",{id:"MathOptInterface.empty!-Tuple{Any}",href:"#MathOptInterface.empty!-Tuple{Any}"},[i("span",{class:"jlbinding"},"MathOptInterface.empty!")],-1)),s[187]||(s[187]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[188]||(s[188]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">empty!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opt)</span></span></code></pre></div><p>Empty the optimizer.</p><p><strong>Arguments</strong></p><ul><li><code>opt::Optimizer</code>: The optimizer instance.</li></ul><p><strong>Returns</strong></p><ul><li><code>Nothing</code></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L181-L191" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",Es,[i("summary",null,[s[189]||(s[189]=i("a",{id:"MathOptInterface.get-Tuple{CBLS.Optimizer, MathOptInterface.SolverName}",href:"#MathOptInterface.get-Tuple{CBLS.Optimizer, MathOptInterface.SolverName}"},[i("span",{class:"jlbinding"},"MathOptInterface.get")],-1)),s[190]||(s[190]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[191]||(s[191]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOI.SolverName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Get the name of the solver.</p><p><strong>Arguments</strong></p><ul><li><code>::Optimizer</code>: The optimizer instance.</li></ul><p><strong>Returns</strong></p><ul><li><code>String</code>: The name of the solver.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L68-L78" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",Cs,[i("summary",null,[s[192]||(s[192]=i("a",{id:"MathOptInterface.get-Tuple{CBLS.Optimizer, MathOptInterface.SolverVersion}",href:"#MathOptInterface.get-Tuple{CBLS.Optimizer, MathOptInterface.SolverVersion}"},[i("span",{class:"jlbinding"},"MathOptInterface.get")],-1)),s[193]||(s[193]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[194]||(s[194]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Moi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOI.SolverVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Get the version of the solver, here <code>LocalSearchSolvers.jl</code>.</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L236-L240" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",ms,[i("summary",null,[s[195]||(s[195]=i("a",{id:"MathOptInterface.is_empty-Tuple{CBLS.Optimizer}",href:"#MathOptInterface.is_empty-Tuple{CBLS.Optimizer}"},[i("span",{class:"jlbinding"},"MathOptInterface.is_empty")],-1)),s[196]||(s[196]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[197]||(s[197]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check if the model is empty.</p><p><strong>Arguments</strong></p><ul><li><code>model::Optimizer</code>: The optimizer instance.</li></ul><p><strong>Returns</strong></p><ul><li><code>Bool</code>: True if the model is empty, false otherwise.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L96-L106" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",Fs,[i("summary",null,[s[198]||(s[198]=i("a",{id:"MathOptInterface.is_valid-Tuple{CBLS.Optimizer, MathOptInterface.ConstraintIndex{MathOptInterface.VariableIndex, MathOptInterface.Integer}}",href:"#MathOptInterface.is_valid-Tuple{CBLS.Optimizer, MathOptInterface.ConstraintIndex{MathOptInterface.VariableIndex, MathOptInterface.Integer}}"},[i("span",{class:"jlbinding"},"MathOptInterface.is_valid")],-1)),s[199]||(s[199]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[200]||(s[200]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_valid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optimizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CI{VI, MOI.Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check if an index is valid for the optimizer.</p><p><strong>Arguments</strong></p><ul><li><p><code>optimizer::Optimizer</code>: The optimizer instance.</p></li><li><p><code>index::CI{VI, MOI.Integer}</code>: The index to be checked.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Bool</code>: True if the index is valid, false otherwise.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L194-L205" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",js,[i("summary",null,[s[201]||(s[201]=i("a",{id:"MathOptInterface.optimize!-Tuple{CBLS.Optimizer}",href:"#MathOptInterface.optimize!-Tuple{CBLS.Optimizer}"},[i("span",{class:"jlbinding"},"MathOptInterface.optimize!")],-1)),s[202]||(s[202]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[203]||(s[203]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optimize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Optimize the model using the optimizer.</p><p><strong>Arguments</strong></p><ul><li><code>model::Optimizer</code>: The optimizer instance.</li></ul><p><strong>Returns</strong></p><ul><li><code>Nothing</code></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L138-L148" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",vs,[i("summary",null,[s[204]||(s[204]=i("a",{id:"MathOptInterface.set",href:"#MathOptInterface.set"},[i("span",{class:"jlbinding"},"MathOptInterface.set")],-1)),s[205]||(s[205]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[206]||(s[206]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOI.Silent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set the verbosity of the solver.</p><p><strong>Arguments</strong></p><ul><li><p><code>::Optimizer</code>: The optimizer instance.</p></li><li><p><code>::MOI.Silent</code>: The silent option for the solver.</p></li><li><p><code>bool::Bool</code>: Whether to set the solver to silent mode.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Nothing</code></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L81-L93" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",fs,[i("summary",null,[s[207]||(s[207]=i("a",{id:"MathOptInterface.set-Tuple{CBLS.Optimizer, MathOptInterface.RawOptimizerAttribute, Any}",href:"#MathOptInterface.set-Tuple{CBLS.Optimizer, MathOptInterface.RawOptimizerAttribute, Any}"},[i("span",{class:"jlbinding"},"MathOptInterface.set")],-1)),s[208]||(s[208]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[209]||(s[209]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOI.RawOptimizerAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value)</span></span></code></pre></div><p>Set a RawOptimizerAttribute to <code>value</code></p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/attributes.jl#L19-L22" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",Bs,[i("summary",null,[s[210]||(s[210]=i("a",{id:"MathOptInterface.set-Tuple{CBLS.Optimizer, MathOptInterface.TimeLimitSec, Union{Nothing, Float64}}",href:"#MathOptInterface.set-Tuple{CBLS.Optimizer, MathOptInterface.TimeLimitSec, Union{Nothing, Float64}}"},[i("span",{class:"jlbinding"},"MathOptInterface.set")],-1)),s[211]||(s[211]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[212]||(s[212]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOI.TimeLimitSec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing,Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set the time limit</p><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/attributes.jl#L7-L10" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",Os,[i("summary",null,[s[213]||(s[213]=i("a",{id:"MathOptInterface.supports_constraint-Union{Tuple{F}, Tuple{CBLS.Optimizer, Type{MathOptInterface.VectorOfVariables}, Type{CBLS.MOIError{F}}}} where F<:Function",href:"#MathOptInterface.supports_constraint-Union{Tuple{F}, Tuple{CBLS.Optimizer, Type{MathOptInterface.VectorOfVariables}, Type{CBLS.MOIError{F}}}} where F<:Function"},[i("span",{class:"jlbinding"},"MathOptInterface.supports_constraint")],-1)),s[214]||(s[214]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[215]||(s[215]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">supports_constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{VOV}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{MOIError}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> begin</span></span></code></pre></div><p>DOCSTRING</p><p><strong>Arguments:</strong></p><ul><li><p>``: DESCRIPTION</p></li><li><p>``: DESCRIPTION</p></li><li><p>``: DESCRIPTION</p></li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L21-L30" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",Ls,[i("summary",null,[s[216]||(s[216]=i("a",{id:"MathOptInterface.supports_constraint-Union{Tuple{F}, Tuple{CBLS.Optimizer, Type{MathOptInterface.VectorOfVariables}, Type{CBLS.MOIIntention{F}}}} where F<:Function",href:"#MathOptInterface.supports_constraint-Union{Tuple{F}, Tuple{CBLS.Optimizer, Type{MathOptInterface.VectorOfVariables}, Type{CBLS.MOIIntention{F}}}} where F<:Function"},[i("span",{class:"jlbinding"},"MathOptInterface.supports_constraint")],-1)),s[217]||(s[217]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[218]||(s[218]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">supports_constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{VOV}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{MOIIntention{F}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Check if the optimizer supports a given intention constraint.</p><p><strong>Arguments</strong></p><ul><li><p><code>::Optimizer</code>: The optimizer instance.</p></li><li><p><code>::Type{VOV}</code>: The type of the variable.</p></li><li><p><code>::Type{MOIIntention{F}}</code>: The type of the intention.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Bool</code>: True if the optimizer supports the constraint, false otherwise.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/constraints.jl#L91-L103" target="_blank" rel="noreferrer">source</a></p>',7))]),i("details",Ss,[i("summary",null,[s[219]||(s[219]=i("a",{id:"MathOptInterface.supports_incremental_interface-Tuple{CBLS.Optimizer}",href:"#MathOptInterface.supports_incremental_interface-Tuple{CBLS.Optimizer}"},[i("span",{class:"jlbinding"},"MathOptInterface.supports_incremental_interface")],-1)),s[220]||(s[220]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[221]||(s[221]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MOI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">supports_incremental_interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Optimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check if the optimizer supports incremental interface.</p><p><strong>Arguments</strong></p><ul><li><code>::Optimizer</code>: The optimizer instance.</li></ul><p><strong>Returns</strong></p><ul><li><code>Bool</code>: True if the optimizer supports incremental interface, false otherwise.</li></ul><p><a href="https://github.com/JuliaConstraints/CBLS.jl/blob/v0.2.2/src/MOI_wrapper.jl#L109-L119" target="_blank" rel="noreferrer">source</a></p>',7))])])}const Ns=n(h,[["render",Is]]);export{Vs as __pageData,Ns as default};
