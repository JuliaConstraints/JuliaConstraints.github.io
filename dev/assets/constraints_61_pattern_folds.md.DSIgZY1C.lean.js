import{_ as n,c as o,j as t,a as e,G as l,a5 as i,B as r,o as d}from"./chunks/framework.CJakPlgM.js";const I=JSON.parse('{"title":"PatternFolds.jl","description":"","frontmatter":{},"headers":[],"relativePath":"constraints/61_pattern_folds.md","filePath":"constraints/61_pattern_folds.md","lastUpdated":null}'),p={name:"constraints/61_pattern_folds.md"},h={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""};function x(L,s,M,D,J,O){const a=r("Badge");return d(),o("div",null,[s[59]||(s[59]=t("h1",{id:"patternfolds-jl",tabindex:"-1"},[e("PatternFolds.jl "),t("a",{class:"header-anchor",href:"#patternfolds-jl","aria-label":'Permalink to "PatternFolds.jl"'},"â€‹")],-1)),s[60]||(s[60]=t("p",null,[e("Documentation for "),t("code",null,"PatternFolds.jl"),e(".")],-1)),t("details",h,[t("summary",null,[s[0]||(s[0]=t("a",{id:"PatternFolds.PatternFold",href:"#PatternFolds.PatternFold"},[t("span",{class:"jlbinding"},"PatternFolds.PatternFold")],-1)),s[1]||(s[1]=e()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[2]||(s[2]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PatternFold{T, P}</span></span></code></pre></div><p>A <code>Union</code> type used as an interface for folded patterns such as <code>VectorFold</code>. To implement the interface and inherit from it, a new structure <code>MyFold{T[,P]}</code> must define three fields:</p><ul><li><p><code>pattern::P</code>. Note that both <code>length(::P)</code> and <code>rand(::P)</code> methods must be available</p></li><li><p><code>gap::T</code>S</p></li><li><p><code>folds::int</code></p></li></ul>',3)),s[3]||(s[3]=t("p",{T:""},"Finally one can redefine PatternFold",-1)),s[4]||(s[4]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PatternFold{T} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Union{AbstractVectorFold{T}, IntervalsFold{T}, MyFold{T[,P]}}</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L11-L22" target="_blank" rel="noreferrer">source</a></p>',2))]),t("details",k,[t("summary",null,[s[5]||(s[5]=t("a",{id:"PatternFolds.AbstractVectorFold",href:"#PatternFolds.AbstractVectorFold"},[t("span",{class:"jlbinding"},"PatternFolds.AbstractVectorFold")],-1)),s[6]||(s[6]=e()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractVectorFold{T, P}</span></span></code></pre></div><p>An abstract type used as an interface for folded vectors such as <code>VectorFold</code>. To implement the interface and inherit from it, a new structure must define three fields:</p><ul><li><p><code>pattern::P</code>. Note that both <code>length(::P)</code> and <code>rand(::P)</code> methods must be available</p></li><li><p><code>gap::T</code></p></li><li><p><code>folds::int</code></p></li></ul><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L1-L8" target="_blank" rel="noreferrer">source</a></p>',4))]),t("details",c,[t("summary",null,[s[8]||(s[8]=t("a",{id:"PatternFolds.IVectorFold",href:"#PatternFolds.IVectorFold"},[t("span",{class:"jlbinding"},"PatternFolds.IVectorFold")],-1)),s[9]||(s[9]=e()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[10]||(s[10]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VectorFold{T,V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractVector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A folded vector structure that extends the methods of AbstractVector to a folded structure.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/immutable_vector.jl#L1-L4" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",u,[t("summary",null,[s[11]||(s[11]=t("a",{id:"PatternFolds.VectorFold",href:"#PatternFolds.VectorFold"},[t("span",{class:"jlbinding"},"PatternFolds.VectorFold")],-1)),s[12]||(s[12]=e()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[13]||(s[13]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">VectorFold{T,V </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractVector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A mutable structure for folded vector that extends the methods of AbstractVector. Compared to <code>IVectorFold</code>, this tructure is about 20% faster using iterators. Note that this structure keep an active pointer to the <code>current</code> <em>unfolded</em> pattern. However, its external behavior is similar to <code>IVectorFold</code>.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/vector.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",g,[t("summary",null,[s[14]||(s[14]=t("a",{id:"Base.iterate-Tuple{IVectorFold}",href:"#Base.iterate-Tuple{IVectorFold}"},[t("span",{class:"jlbinding"},"Base.iterate")],-1)),s[15]||(s[15]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[16]||(s[16]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iterate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iter)</span></span></code></pre></div><p>Extends <code>iterate</code> methods from <code>Base</code> to allow forward and reverse iteration on both <code>VectorFold</code> and <code>MVectorFold</code>.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/immutable_vector.jl#L38-L41" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",b,[t("summary",null,[s[17]||(s[17]=t("a",{id:"Base.length-Tuple{Union{PatternFolds.AbstractVectorFold, IntervalsFold}}",href:"#Base.length-Tuple{Union{PatternFolds.AbstractVectorFold, IntervalsFold}}"},[t("span",{class:"jlbinding"},"Base.length")],-1)),s[18]||(s[18]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PatternFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the length of <code>pf</code> if unfolded.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L52-L55" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",F,[t("summary",null,[s[20]||(s[20]=t("a",{id:"Base.rand-Tuple{PF} where PF<:Union{PatternFolds.AbstractVectorFold, IntervalsFold}",href:"#Base.rand-Tuple{PF} where PF<:Union{PatternFolds.AbstractVectorFold, IntervalsFold}"},[t("span",{class:"jlbinding"},"Base.rand")],-1)),s[21]||(s[21]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[22]||(s[22]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PatternFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns a random value of <code>pf</code> as if it was unfolded.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L59-L62" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",y,[t("summary",null,[s[23]||(s[23]=t("a",{id:"Base.rand-Tuple{Set{<:PatternFolds.AbstractVectorFold}}",href:"#Base.rand-Tuple{Set{<:PatternFolds.AbstractVectorFold}}"},[t("span",{class:"jlbinding"},"Base.rand")],-1)),s[24]||(s[24]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[25]||(s[25]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{AbstractVectorFold}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Extend the </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`Base.rand`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`Vector{AbstractVectorFold}`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span></code></pre></div><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L121-L124" target="_blank" rel="noreferrer">source</a></p>',2))]),t("details",m,[t("summary",null,[s[26]||(s[26]=t("a",{id:"Base.rand-Tuple{V} where V<:(Set{<:IntervalsFold})",href:"#Base.rand-Tuple{V} where V<:(Set{<:IntervalsFold})"},[t("span",{class:"jlbinding"},"Base.rand")],-1)),s[27]||(s[27]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[28]||(s[28]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{IntervalsFold}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extend the <code>Base.rand</code> function to <code>Vector{IntervalsFold}</code>.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/intervals.jl#L114-L118" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",f,[t("summary",null,[s[29]||(s[29]=t("a",{id:"PatternFolds.fold-Union{Tuple{V}, Tuple{T}, Tuple{V, Any}} where {T<:Real, V<:AbstractVector{T}}",href:"#PatternFolds.fold-Union{Tuple{V}, Tuple{T}, Tuple{V, Any}} where {T<:Real, V<:AbstractVector{T}}"},[t("span",{class:"jlbinding"},"PatternFolds.fold")],-1)),s[30]||(s[30]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[31]||(s[31]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, depth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>returns a suitable <code>VectorFold</code>, which when unfolded gives the Vector V.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L73-L76" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",E,[t("summary",null,[s[32]||(s[32]=t("a",{id:"PatternFolds.folds-Tuple{Any}",href:"#PatternFolds.folds-Tuple{Any}"},[t("span",{class:"jlbinding"},"PatternFolds.folds")],-1)),s[33]||(s[33]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[34]||(s[34]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">folds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PatternFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the number of <em>folds</em>. An infinite folded pattern returns <code>0</code>.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L37-L40" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",j,[t("summary",null,[s[35]||(s[35]=t("a",{id:"PatternFolds.gap-Tuple{Any}",href:"#PatternFolds.gap-Tuple{Any}"},[t("span",{class:"jlbinding"},"PatternFolds.gap")],-1)),s[36]||(s[36]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[37]||(s[37]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PatternFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the <em>gap</em> between the starts of consecutive folds.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L31-L34" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",v,[t("summary",null,[s[38]||(s[38]=t("a",{id:"PatternFolds.make_vector_fold",href:"#PatternFolds.make_vector_fold"},[t("span",{class:"jlbinding"},"PatternFolds.make_vector_fold")],-1)),s[39]||(s[39]=e()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[40]||(s[40]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_vector_fold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern, gap, fold, kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :mutable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A dispatcher to construct a folded vector. The <code>kind</code> of vector can be set to either <code>:mutable</code> (default) or <code>:immutable</code>. The default is faster in most cases but it depends on the <code>pattern</code>, <code>gap</code>, and <code>fold</code> parameters. For critical code, it is recommended to benchmark both options.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L95-L98" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",C,[t("summary",null,[s[41]||(s[41]=t("a",{id:"PatternFolds.pattern-Tuple{Any, Any}",href:"#PatternFolds.pattern-Tuple{Any, Any}"},[t("span",{class:"jlbinding"},"PatternFolds.pattern")],-1)),s[42]||(s[42]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[43]||(s[43]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vf, index)</span></span></code></pre></div><p>Return the element at <code>index</code> in the original pattern.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/immutable_vector.jl#L11-L14" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",P,[t("summary",null,[s[44]||(s[44]=t("a",{id:"PatternFolds.pattern-Tuple{Any}",href:"#PatternFolds.pattern-Tuple{Any}"},[t("span",{class:"jlbinding"},"PatternFolds.pattern")],-1)),s[45]||(s[45]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[46]||(s[46]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PatternFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the <em>pattern</em> of any <code>PatternFold</code>. The pattern defines the occurrences of the first fold.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L25-L28" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",T,[t("summary",null,[s[47]||(s[47]=t("a",{id:"PatternFolds.pattern_length-Tuple{Any}",href:"#PatternFolds.pattern_length-Tuple{Any}"},[t("span",{class:"jlbinding"},"PatternFolds.pattern_length")],-1)),s[48]||(s[48]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[49]||(s[49]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pattern_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PatternFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the length of the basic pattern of <code>pf</code>.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L46-L49" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",A,[t("summary",null,[s[50]||(s[50]=t("a",{id:"PatternFolds.reset_pattern!-Tuple{Any}",href:"#PatternFolds.reset_pattern!-Tuple{Any}"},[t("span",{class:"jlbinding"},"PatternFolds.reset_pattern!")],-1)),s[51]||(s[51]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[52]||(s[52]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reset_pattern!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PatternFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reset the <em>unfolded</em> pattern to the first fold.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/common.jl#L67-L70" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",B,[t("summary",null,[s[53]||(s[53]=t("a",{id:"PatternFolds.set_fold!",href:"#PatternFolds.set_fold!"},[t("span",{class:"jlbinding"},"PatternFolds.set_fold!")],-1)),s[54]||(s[54]=e()),l(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[55]||(s[55]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_fold!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mvf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VectorFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, new_fold </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mvf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set the <em>unfolded</em> pattern to <code>new_fold</code>. By default move the next <em>fold</em> after <code>current</code>.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/vector.jl#L24-L27" target="_blank" rel="noreferrer">source</a></p>',3))]),t("details",V,[t("summary",null,[s[56]||(s[56]=t("a",{id:"PatternFolds.unfold-Tuple{IVectorFold}",href:"#PatternFolds.unfold-Tuple{IVectorFold}"},[t("span",{class:"jlbinding"},"PatternFolds.unfold")],-1)),s[57]||(s[57]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[58]||(s[58]=i('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unfold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VectorFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; from</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">folds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vf))</span></span></code></pre></div><p>Construct the unfolded version of <code>vf</code> (with the same type as <code>pattern(vf)</code>) based. Please note that using an iterator on <code>vf</code> avoid memory allocation, which is not the case of <code>unfold</code>.</p><p><a href="https://github.com/JuliaConstraints/PatternFolds.jl/blob/v0.2.6/src/immutable_vector.jl#L19-L22" target="_blank" rel="noreferrer">source</a></p>',3))])])}const R=n(p,[["render",x]]);export{I as __pageData,R as default};
